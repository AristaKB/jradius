// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:18 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: NAS-Port-Type<br>
 * Attribute Type: 61<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Async (0)
 * <li> Sync (1)
 * <li> ISDN (2)
 * <li> ISDN-V120 (3)
 * <li> ISDN-V110 (4)
 * <li> Virtual (5)
 * <li> PIAFS (6)
 * <li> HDLC-Clear-Channel (7)
 * <li> X.25 (8)
 * <li> X.75 (9)
 * <li> G.3-Fax (10)
 * <li> SDSL (11)
 * <li> ADSL-CAP (12)
 * <li> ADSL-DMT (13)
 * <li> IDSL (14)
 * <li> Ethernet (15)
 * <li> xDSL (16)
 * <li> Cable (17)
 * <li> Wireless-Other (18)
 * <li> Wireless-802.11 (19)
 * <li> Token-Ring (20)
 * <li> FDDI (21)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_NASPortType extends RadiusAttribute
{
    public static final String NAME = "NAS-Port-Type";
    public static final long TYPE = 61;

    public static final long serialVersionUID = TYPE;

    public static final Long Async = new Long(0L);
    public static final Long Sync = new Long(1L);
    public static final Long ISDN = new Long(2L);
    public static final Long ISDNV120 = new Long(3L);
    public static final Long ISDNV110 = new Long(4L);
    public static final Long Virtual = new Long(5L);
    public static final Long PIAFS = new Long(6L);
    public static final Long HDLCClearChannel = new Long(7L);
    public static final Long X25 = new Long(8L);
    public static final Long X75 = new Long(9L);
    public static final Long G3Fax = new Long(10L);
    public static final Long SDSL = new Long(11L);
    public static final Long ADSLCAP = new Long(12L);
    public static final Long ADSLDMT = new Long(13L);
    public static final Long IDSL = new Long(14L);
    public static final Long Ethernet = new Long(15L);
    public static final Long xDSL = new Long(16L);
    public static final Long Cable = new Long(17L);
    public static final Long WirelessOther = new Long(18L);
    public static final Long Wireless80211 = new Long(19L);
    public static final Long TokenRing = new Long(20L);
    public static final Long FDDI = new Long(21L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Async".equals(name)) return new Long(0L);
            if ("Sync".equals(name)) return new Long(1L);
            if ("ISDN".equals(name)) return new Long(2L);
            if ("ISDN-V120".equals(name)) return new Long(3L);
            if ("ISDN-V110".equals(name)) return new Long(4L);
            if ("Virtual".equals(name)) return new Long(5L);
            if ("PIAFS".equals(name)) return new Long(6L);
            if ("HDLC-Clear-Channel".equals(name)) return new Long(7L);
            if ("X.25".equals(name)) return new Long(8L);
            if ("X.75".equals(name)) return new Long(9L);
            if ("G.3-Fax".equals(name)) return new Long(10L);
            if ("SDSL".equals(name)) return new Long(11L);
            if ("ADSL-CAP".equals(name)) return new Long(12L);
            if ("ADSL-DMT".equals(name)) return new Long(13L);
            if ("IDSL".equals(name)) return new Long(14L);
            if ("Ethernet".equals(name)) return new Long(15L);
            if ("xDSL".equals(name)) return new Long(16L);
            if ("Cable".equals(name)) return new Long(17L);
            if ("Wireless-Other".equals(name)) return new Long(18L);
            if ("Wireless-802.11".equals(name)) return new Long(19L);
            if ("Token-Ring".equals(name)) return new Long(20L);
            if ("FDDI".equals(name)) return new Long(21L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "Async";
            if (new Long(1L).equals(value)) return "Sync";
            if (new Long(2L).equals(value)) return "ISDN";
            if (new Long(3L).equals(value)) return "ISDN-V120";
            if (new Long(4L).equals(value)) return "ISDN-V110";
            if (new Long(5L).equals(value)) return "Virtual";
            if (new Long(6L).equals(value)) return "PIAFS";
            if (new Long(7L).equals(value)) return "HDLC-Clear-Channel";
            if (new Long(8L).equals(value)) return "X.25";
            if (new Long(9L).equals(value)) return "X.75";
            if (new Long(10L).equals(value)) return "G.3-Fax";
            if (new Long(11L).equals(value)) return "SDSL";
            if (new Long(12L).equals(value)) return "ADSL-CAP";
            if (new Long(13L).equals(value)) return "ADSL-DMT";
            if (new Long(14L).equals(value)) return "IDSL";
            if (new Long(15L).equals(value)) return "Ethernet";
            if (new Long(16L).equals(value)) return "xDSL";
            if (new Long(17L).equals(value)) return "Cable";
            if (new Long(18L).equals(value)) return "Wireless-Other";
            if (new Long(19L).equals(value)) return "Wireless-802.11";
            if (new Long(20L).equals(value)) return "Token-Ring";
            if (new Long(21L).equals(value)) return "FDDI";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 61;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_NASPortType()
    {
        setup();
    }

    public Attr_NASPortType(Serializable o)
    {
        setup(o);
    }
}
