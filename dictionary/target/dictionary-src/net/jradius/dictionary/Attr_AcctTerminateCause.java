// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Acct-Terminate-Cause<br>
 * Attribute Type: 49<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> User-Request (1)
 * <li> Lost-Carrier (2)
 * <li> Lost-Service (3)
 * <li> Idle-Timeout (4)
 * <li> Session-Timeout (5)
 * <li> Admin-Reset (6)
 * <li> Admin-Reboot (7)
 * <li> Port-Error (8)
 * <li> NAS-Error (9)
 * <li> NAS-Request (10)
 * <li> NAS-Reboot (11)
 * <li> Port-Unneeded (12)
 * <li> Port-Preempted (13)
 * <li> Port-Suspended (14)
 * <li> Service-Unavailable (15)
 * <li> Callback (16)
 * <li> User-Error (17)
 * <li> Host-Request (18)
 * <li> Supplicant-Restart (19)
 * <li> Reauthentication-Failure (20)
 * <li> Port-Reinit (21)
 * <li> Port-Disabled (22)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_AcctTerminateCause extends RadiusAttribute
{
    public static final String NAME = "Acct-Terminate-Cause";
    public static final long TYPE = 49;

    public static final long serialVersionUID = TYPE;

    public static final Long UserRequest = new Long(1L);
    public static final Long LostCarrier = new Long(2L);
    public static final Long LostService = new Long(3L);
    public static final Long IdleTimeout = new Long(4L);
    public static final Long SessionTimeout = new Long(5L);
    public static final Long AdminReset = new Long(6L);
    public static final Long AdminReboot = new Long(7L);
    public static final Long PortError = new Long(8L);
    public static final Long NASError = new Long(9L);
    public static final Long NASRequest = new Long(10L);
    public static final Long NASReboot = new Long(11L);
    public static final Long PortUnneeded = new Long(12L);
    public static final Long PortPreempted = new Long(13L);
    public static final Long PortSuspended = new Long(14L);
    public static final Long ServiceUnavailable = new Long(15L);
    public static final Long Callback = new Long(16L);
    public static final Long UserError = new Long(17L);
    public static final Long HostRequest = new Long(18L);
    public static final Long SupplicantRestart = new Long(19L);
    public static final Long ReauthenticationFailure = new Long(20L);
    public static final Long PortReinit = new Long(21L);
    public static final Long PortDisabled = new Long(22L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("User-Request".equals(name)) return new Long(1L);
            if ("Lost-Carrier".equals(name)) return new Long(2L);
            if ("Lost-Service".equals(name)) return new Long(3L);
            if ("Idle-Timeout".equals(name)) return new Long(4L);
            if ("Session-Timeout".equals(name)) return new Long(5L);
            if ("Admin-Reset".equals(name)) return new Long(6L);
            if ("Admin-Reboot".equals(name)) return new Long(7L);
            if ("Port-Error".equals(name)) return new Long(8L);
            if ("NAS-Error".equals(name)) return new Long(9L);
            if ("NAS-Request".equals(name)) return new Long(10L);
            if ("NAS-Reboot".equals(name)) return new Long(11L);
            if ("Port-Unneeded".equals(name)) return new Long(12L);
            if ("Port-Preempted".equals(name)) return new Long(13L);
            if ("Port-Suspended".equals(name)) return new Long(14L);
            if ("Service-Unavailable".equals(name)) return new Long(15L);
            if ("Callback".equals(name)) return new Long(16L);
            if ("User-Error".equals(name)) return new Long(17L);
            if ("Host-Request".equals(name)) return new Long(18L);
            if ("Supplicant-Restart".equals(name)) return new Long(19L);
            if ("Reauthentication-Failure".equals(name)) return new Long(20L);
            if ("Port-Reinit".equals(name)) return new Long(21L);
            if ("Port-Disabled".equals(name)) return new Long(22L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "User-Request";
            if (new Long(2L).equals(value)) return "Lost-Carrier";
            if (new Long(3L).equals(value)) return "Lost-Service";
            if (new Long(4L).equals(value)) return "Idle-Timeout";
            if (new Long(5L).equals(value)) return "Session-Timeout";
            if (new Long(6L).equals(value)) return "Admin-Reset";
            if (new Long(7L).equals(value)) return "Admin-Reboot";
            if (new Long(8L).equals(value)) return "Port-Error";
            if (new Long(9L).equals(value)) return "NAS-Error";
            if (new Long(10L).equals(value)) return "NAS-Request";
            if (new Long(11L).equals(value)) return "NAS-Reboot";
            if (new Long(12L).equals(value)) return "Port-Unneeded";
            if (new Long(13L).equals(value)) return "Port-Preempted";
            if (new Long(14L).equals(value)) return "Port-Suspended";
            if (new Long(15L).equals(value)) return "Service-Unavailable";
            if (new Long(16L).equals(value)) return "Callback";
            if (new Long(17L).equals(value)) return "User-Error";
            if (new Long(18L).equals(value)) return "Host-Request";
            if (new Long(19L).equals(value)) return "Supplicant-Restart";
            if (new Long(20L).equals(value)) return "Reauthentication-Failure";
            if (new Long(21L).equals(value)) return "Port-Reinit";
            if (new Long(22L).equals(value)) return "Port-Disabled";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 49;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_AcctTerminateCause()
    {
        setup();
    }

    public Attr_AcctTerminateCause(Serializable o)
    {
        setup(o);
    }
}
