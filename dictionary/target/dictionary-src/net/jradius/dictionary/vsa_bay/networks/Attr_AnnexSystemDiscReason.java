// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_bay.networks;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Annex-System-Disc-Reason<br>
 * Attribute Type: 26<br>
 * Vendor Id: 1584<br>
 * VSA Type: 44<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Unknown (0)
 * <li> Line-disconnected (1)
 * <li> Dial-failed (2)
 * <li> WAN-manager-error (3)
 * <li> Disconnect-reset (4)
 * <li> Error-from-adm_notify (5)
 * <li> Modem-down-adm_notify (6)
 * <li> PPP-protocol-disconnect (7)
 * <li> Inactivity-timer (8)
 * <li> CLI-Hangup-command (9)
 * <li> CLI-last-job (10)
 * <li> Session-timeout (11)
 * <li> Slave-termination (12)
 * <li> Abnormal-termination (13)
 * <li> DCD-wait-failed (14)
 * <li> CLI-inactivity (15)
 * <li> Admin-port-reset (16)
 * <li> CLI-auth-failed (17)
 * <li> Slave-auth-failed (18)
 * <li> PAP-auth-failed (19)
 * <li> CHAP-auth-failed (20)
 * <li> Local-modem-reset (21)
 * <li> Modem-dead (22)
 * <li> PPP-LCP-failure (23)
 * <li> PPP-IPCP-failure (24)
 * <li> PPP-IPXCP-failure (25)
 * <li> PPP-ATCP-failure (26)
 * <li> PPP-CCP-failure (27)
 * <li> PPP-MP-failure (28)
 * <li> PPP-IPCP-timeout (29)
 * <li> PPP-IPXCP-timeout (30)
 * <li> PPP-ATCP-timeout (31)
 * <li> PPP-CCP-timeout (32)
 * <li> PPP-MP-timeout (33)
 * <li> PPP-init-failure (34)
 * <li> PPP-Unknown (35)
 * <li> PPP-Dialback-failed (36)
 * <li> PPP-Address-In-Use (37)
 * <li> PPP-No-device (38)
 * <li> PPP-Modem-hangup-rcvd (39)
 * <li> PPP-Hangup-rcvd (40)
 * <li> PPP-Termination-rcvd (41)
 * <li> PPP-Kill-rcvd (42)
 * <li> PPP-Time-rcvd (43)
 * <li> PPP-No-memory (44)
 * <li> PPP-Connection-Abort (45)
 * <li> PPP-VPN-LCP-failure (46)
 * <li> PPP-VPN-Auth-failure (47)
 * <li> PPP-MP-invalid-port (48)
 * <li> PPP-Invalid-device (49)
 * <li> PPP-MMP-bundle-failure (50)
 * <li> DVS-Registration-failure (51)
 * <li> DVS-Home-agent-dereg (52)
 * <li> DVS-Tunnel-no-renew (53)
 * <li> DVS-Tunnel-expired (54)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_AnnexSystemDiscReason extends VSAttribute
{
    public static final String NAME = "Annex-System-Disc-Reason";
    public static final int VENDOR_ID = 1584;
    public static final int VSA_TYPE = 44;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long Unknown = new Long(0L);
    public static final Long Linedisconnected = new Long(1L);
    public static final Long Dialfailed = new Long(2L);
    public static final Long WANmanagererror = new Long(3L);
    public static final Long Disconnectreset = new Long(4L);
    public static final Long Errorfromadmnotify = new Long(5L);
    public static final Long Modemdownadmnotify = new Long(6L);
    public static final Long PPPprotocoldisconnect = new Long(7L);
    public static final Long Inactivitytimer = new Long(8L);
    public static final Long CLIHangupcommand = new Long(9L);
    public static final Long CLIlastjob = new Long(10L);
    public static final Long Sessiontimeout = new Long(11L);
    public static final Long Slavetermination = new Long(12L);
    public static final Long Abnormaltermination = new Long(13L);
    public static final Long DCDwaitfailed = new Long(14L);
    public static final Long CLIinactivity = new Long(15L);
    public static final Long Adminportreset = new Long(16L);
    public static final Long CLIauthfailed = new Long(17L);
    public static final Long Slaveauthfailed = new Long(18L);
    public static final Long PAPauthfailed = new Long(19L);
    public static final Long CHAPauthfailed = new Long(20L);
    public static final Long Localmodemreset = new Long(21L);
    public static final Long Modemdead = new Long(22L);
    public static final Long PPPLCPfailure = new Long(23L);
    public static final Long PPPIPCPfailure = new Long(24L);
    public static final Long PPPIPXCPfailure = new Long(25L);
    public static final Long PPPATCPfailure = new Long(26L);
    public static final Long PPPCCPfailure = new Long(27L);
    public static final Long PPPMPfailure = new Long(28L);
    public static final Long PPPIPCPtimeout = new Long(29L);
    public static final Long PPPIPXCPtimeout = new Long(30L);
    public static final Long PPPATCPtimeout = new Long(31L);
    public static final Long PPPCCPtimeout = new Long(32L);
    public static final Long PPPMPtimeout = new Long(33L);
    public static final Long PPPinitfailure = new Long(34L);
    public static final Long PPPUnknown = new Long(35L);
    public static final Long PPPDialbackfailed = new Long(36L);
    public static final Long PPPAddressInUse = new Long(37L);
    public static final Long PPPNodevice = new Long(38L);
    public static final Long PPPModemhanguprcvd = new Long(39L);
    public static final Long PPPHanguprcvd = new Long(40L);
    public static final Long PPPTerminationrcvd = new Long(41L);
    public static final Long PPPKillrcvd = new Long(42L);
    public static final Long PPPTimercvd = new Long(43L);
    public static final Long PPPNomemory = new Long(44L);
    public static final Long PPPConnectionAbort = new Long(45L);
    public static final Long PPPVPNLCPfailure = new Long(46L);
    public static final Long PPPVPNAuthfailure = new Long(47L);
    public static final Long PPPMPinvalidport = new Long(48L);
    public static final Long PPPInvaliddevice = new Long(49L);
    public static final Long PPPMMPbundlefailure = new Long(50L);
    public static final Long DVSRegistrationfailure = new Long(51L);
    public static final Long DVSHomeagentdereg = new Long(52L);
    public static final Long DVSTunnelnorenew = new Long(53L);
    public static final Long DVSTunnelexpired = new Long(54L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L),new Long(33L),new Long(34L),new Long(35L),new Long(36L),new Long(37L),new Long(38L),new Long(39L),new Long(40L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(46L),new Long(47L),new Long(48L),new Long(49L),new Long(50L),new Long(51L),new Long(52L),new Long(53L),new Long(54L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Unknown".equals(name)) return new Long(0L);
            if ("Line-disconnected".equals(name)) return new Long(1L);
            if ("Dial-failed".equals(name)) return new Long(2L);
            if ("WAN-manager-error".equals(name)) return new Long(3L);
            if ("Disconnect-reset".equals(name)) return new Long(4L);
            if ("Error-from-adm_notify".equals(name)) return new Long(5L);
            if ("Modem-down-adm_notify".equals(name)) return new Long(6L);
            if ("PPP-protocol-disconnect".equals(name)) return new Long(7L);
            if ("Inactivity-timer".equals(name)) return new Long(8L);
            if ("CLI-Hangup-command".equals(name)) return new Long(9L);
            if ("CLI-last-job".equals(name)) return new Long(10L);
            if ("Session-timeout".equals(name)) return new Long(11L);
            if ("Slave-termination".equals(name)) return new Long(12L);
            if ("Abnormal-termination".equals(name)) return new Long(13L);
            if ("DCD-wait-failed".equals(name)) return new Long(14L);
            if ("CLI-inactivity".equals(name)) return new Long(15L);
            if ("Admin-port-reset".equals(name)) return new Long(16L);
            if ("CLI-auth-failed".equals(name)) return new Long(17L);
            if ("Slave-auth-failed".equals(name)) return new Long(18L);
            if ("PAP-auth-failed".equals(name)) return new Long(19L);
            if ("CHAP-auth-failed".equals(name)) return new Long(20L);
            if ("Local-modem-reset".equals(name)) return new Long(21L);
            if ("Modem-dead".equals(name)) return new Long(22L);
            if ("PPP-LCP-failure".equals(name)) return new Long(23L);
            if ("PPP-IPCP-failure".equals(name)) return new Long(24L);
            if ("PPP-IPXCP-failure".equals(name)) return new Long(25L);
            if ("PPP-ATCP-failure".equals(name)) return new Long(26L);
            if ("PPP-CCP-failure".equals(name)) return new Long(27L);
            if ("PPP-MP-failure".equals(name)) return new Long(28L);
            if ("PPP-IPCP-timeout".equals(name)) return new Long(29L);
            if ("PPP-IPXCP-timeout".equals(name)) return new Long(30L);
            if ("PPP-ATCP-timeout".equals(name)) return new Long(31L);
            if ("PPP-CCP-timeout".equals(name)) return new Long(32L);
            if ("PPP-MP-timeout".equals(name)) return new Long(33L);
            if ("PPP-init-failure".equals(name)) return new Long(34L);
            if ("PPP-Unknown".equals(name)) return new Long(35L);
            if ("PPP-Dialback-failed".equals(name)) return new Long(36L);
            if ("PPP-Address-In-Use".equals(name)) return new Long(37L);
            if ("PPP-No-device".equals(name)) return new Long(38L);
            if ("PPP-Modem-hangup-rcvd".equals(name)) return new Long(39L);
            if ("PPP-Hangup-rcvd".equals(name)) return new Long(40L);
            if ("PPP-Termination-rcvd".equals(name)) return new Long(41L);
            if ("PPP-Kill-rcvd".equals(name)) return new Long(42L);
            if ("PPP-Time-rcvd".equals(name)) return new Long(43L);
            if ("PPP-No-memory".equals(name)) return new Long(44L);
            if ("PPP-Connection-Abort".equals(name)) return new Long(45L);
            if ("PPP-VPN-LCP-failure".equals(name)) return new Long(46L);
            if ("PPP-VPN-Auth-failure".equals(name)) return new Long(47L);
            if ("PPP-MP-invalid-port".equals(name)) return new Long(48L);
            if ("PPP-Invalid-device".equals(name)) return new Long(49L);
            if ("PPP-MMP-bundle-failure".equals(name)) return new Long(50L);
            if ("DVS-Registration-failure".equals(name)) return new Long(51L);
            if ("DVS-Home-agent-dereg".equals(name)) return new Long(52L);
            if ("DVS-Tunnel-no-renew".equals(name)) return new Long(53L);
            if ("DVS-Tunnel-expired".equals(name)) return new Long(54L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "Unknown";
            if (new Long(1L).equals(value)) return "Line-disconnected";
            if (new Long(2L).equals(value)) return "Dial-failed";
            if (new Long(3L).equals(value)) return "WAN-manager-error";
            if (new Long(4L).equals(value)) return "Disconnect-reset";
            if (new Long(5L).equals(value)) return "Error-from-adm_notify";
            if (new Long(6L).equals(value)) return "Modem-down-adm_notify";
            if (new Long(7L).equals(value)) return "PPP-protocol-disconnect";
            if (new Long(8L).equals(value)) return "Inactivity-timer";
            if (new Long(9L).equals(value)) return "CLI-Hangup-command";
            if (new Long(10L).equals(value)) return "CLI-last-job";
            if (new Long(11L).equals(value)) return "Session-timeout";
            if (new Long(12L).equals(value)) return "Slave-termination";
            if (new Long(13L).equals(value)) return "Abnormal-termination";
            if (new Long(14L).equals(value)) return "DCD-wait-failed";
            if (new Long(15L).equals(value)) return "CLI-inactivity";
            if (new Long(16L).equals(value)) return "Admin-port-reset";
            if (new Long(17L).equals(value)) return "CLI-auth-failed";
            if (new Long(18L).equals(value)) return "Slave-auth-failed";
            if (new Long(19L).equals(value)) return "PAP-auth-failed";
            if (new Long(20L).equals(value)) return "CHAP-auth-failed";
            if (new Long(21L).equals(value)) return "Local-modem-reset";
            if (new Long(22L).equals(value)) return "Modem-dead";
            if (new Long(23L).equals(value)) return "PPP-LCP-failure";
            if (new Long(24L).equals(value)) return "PPP-IPCP-failure";
            if (new Long(25L).equals(value)) return "PPP-IPXCP-failure";
            if (new Long(26L).equals(value)) return "PPP-ATCP-failure";
            if (new Long(27L).equals(value)) return "PPP-CCP-failure";
            if (new Long(28L).equals(value)) return "PPP-MP-failure";
            if (new Long(29L).equals(value)) return "PPP-IPCP-timeout";
            if (new Long(30L).equals(value)) return "PPP-IPXCP-timeout";
            if (new Long(31L).equals(value)) return "PPP-ATCP-timeout";
            if (new Long(32L).equals(value)) return "PPP-CCP-timeout";
            if (new Long(33L).equals(value)) return "PPP-MP-timeout";
            if (new Long(34L).equals(value)) return "PPP-init-failure";
            if (new Long(35L).equals(value)) return "PPP-Unknown";
            if (new Long(36L).equals(value)) return "PPP-Dialback-failed";
            if (new Long(37L).equals(value)) return "PPP-Address-In-Use";
            if (new Long(38L).equals(value)) return "PPP-No-device";
            if (new Long(39L).equals(value)) return "PPP-Modem-hangup-rcvd";
            if (new Long(40L).equals(value)) return "PPP-Hangup-rcvd";
            if (new Long(41L).equals(value)) return "PPP-Termination-rcvd";
            if (new Long(42L).equals(value)) return "PPP-Kill-rcvd";
            if (new Long(43L).equals(value)) return "PPP-Time-rcvd";
            if (new Long(44L).equals(value)) return "PPP-No-memory";
            if (new Long(45L).equals(value)) return "PPP-Connection-Abort";
            if (new Long(46L).equals(value)) return "PPP-VPN-LCP-failure";
            if (new Long(47L).equals(value)) return "PPP-VPN-Auth-failure";
            if (new Long(48L).equals(value)) return "PPP-MP-invalid-port";
            if (new Long(49L).equals(value)) return "PPP-Invalid-device";
            if (new Long(50L).equals(value)) return "PPP-MMP-bundle-failure";
            if (new Long(51L).equals(value)) return "DVS-Registration-failure";
            if (new Long(52L).equals(value)) return "DVS-Home-agent-dereg";
            if (new Long(53L).equals(value)) return "DVS-Tunnel-no-renew";
            if (new Long(54L).equals(value)) return "DVS-Tunnel-expired";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_AnnexSystemDiscReason()
    {
        setup();
    }

    public Attr_AnnexSystemDiscReason(Serializable o)
    {
        setup(o);
    }
}
