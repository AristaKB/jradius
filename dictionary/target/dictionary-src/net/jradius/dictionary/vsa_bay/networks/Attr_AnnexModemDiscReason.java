// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_bay.networks;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Annex-Modem-Disc-Reason<br>
 * Attribute Type: 26<br>
 * Vendor Id: 1584<br>
 * VSA Type: 45<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Unknown (0)
 * <li> Local-disconnect (1)
 * <li> CD-Timer-Expired (2)
 * <li> Remote-protocol-disc (4)
 * <li> Clear-down (5)
 * <li> Long-Space-disconnect (6)
 * <li> Carrier-Lost (7)
 * <li> Modem-Retrain-Timeout (8)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_AnnexModemDiscReason extends VSAttribute
{
    public static final String NAME = "Annex-Modem-Disc-Reason";
    public static final int VENDOR_ID = 1584;
    public static final int VSA_TYPE = 45;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long Unknown = new Long(0L);
    public static final Long Localdisconnect = new Long(1L);
    public static final Long CDTimerExpired = new Long(2L);
    public static final Long Remoteprotocoldisc = new Long(4L);
    public static final Long Cleardown = new Long(5L);
    public static final Long LongSpacedisconnect = new Long(6L);
    public static final Long CarrierLost = new Long(7L);
    public static final Long ModemRetrainTimeout = new Long(8L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Unknown".equals(name)) return new Long(0L);
            if ("Local-disconnect".equals(name)) return new Long(1L);
            if ("CD-Timer-Expired".equals(name)) return new Long(2L);
            if ("Remote-protocol-disc".equals(name)) return new Long(4L);
            if ("Clear-down".equals(name)) return new Long(5L);
            if ("Long-Space-disconnect".equals(name)) return new Long(6L);
            if ("Carrier-Lost".equals(name)) return new Long(7L);
            if ("Modem-Retrain-Timeout".equals(name)) return new Long(8L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "Unknown";
            if (new Long(1L).equals(value)) return "Local-disconnect";
            if (new Long(2L).equals(value)) return "CD-Timer-Expired";
            if (new Long(4L).equals(value)) return "Remote-protocol-disc";
            if (new Long(5L).equals(value)) return "Clear-down";
            if (new Long(6L).equals(value)) return "Long-Space-disconnect";
            if (new Long(7L).equals(value)) return "Carrier-Lost";
            if (new Long(8L).equals(value)) return "Modem-Retrain-Timeout";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_AnnexModemDiscReason()
    {
        setup();
    }

    public Attr_AnnexModemDiscReason(Serializable o)
    {
        setup(o);
    }
}
