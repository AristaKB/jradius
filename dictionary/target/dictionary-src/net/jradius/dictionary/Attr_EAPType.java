// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: EAP-Type<br>
 * Attribute Type: 1018 (FreeRADIUS Internal Attribute)<br><br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> None (0)
 * <li> Identity (1)
 * <li> Notification (2)
 * <li> NAK (3)
 * <li> MD5-Challenge (4)
 * <li> One-Time-Password (5)
 * <li> Generic-Token-Card (6)
 * <li> RSA-Public-Key (9)
 * <li> DSS-Unilateral (10)
 * <li> KEA (11)
 * <li> KEA-Validate (12)
 * <li> EAP-TLS (13)
 * <li> Defender-Token (14)
 * <li> RSA-SecurID-EAP (15)
 * <li> Arcot-Systems-EAP (16)
 * <li> Cisco-LEAP (17)
 * <li> Nokia-IP-Smart-Card (18)
 * <li> SIM (18)
 * <li> SRP-SHA1-Part-1 (19)
 * <li> SRP-SHA1-Part-2 (20)
 * <li> EAP-TTLS (21)
 * <li> Remote-Access-Service (22)
 * <li> UMTS (23)
 * <li> EAP-3Com-Wireless (24)
 * <li> PEAP (25)
 * <li> MS-EAP-Authentication (26)
 * <li> Microsoft-MS-CHAPv2 (26)
 * <li> MS-CHAP-V2 (26)
 * <li> MAKE (27)
 * <li> CRYPTOCard (28)
 * <li> EAP-MSCHAP-V2 (29)
 * <li> Cisco-MS-CHAPv2 (29)
 * <li> DynamID (30)
 * <li> Rob-EAP (31)
 * <li> SecurID-EAP (32)
 * <li> MS-Authentication-TLV (33)
 * <li> SentriNET (34)
 * <li> EAP-Actiontec-Wireless (35)
 * <li> Cogent-Biomentric-EAP (36)
 * <li> AirFortress-EAP (37)
 * <li> EAP-HTTP-Digest (38)
 * <li> SecuriSuite-EAP (39)
 * <li> DeviceConnect-EAP (40)
 * <li> EAP-SPEKE (41)
 * <li> EAP-MOBAC (42)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_EAPType extends RadiusAttribute
{
    public static final String NAME = "EAP-Type";
    public static final long TYPE = 1018;

    public static final long serialVersionUID = TYPE;

    public static final Long None = new Long(0L);
    public static final Long Identity = new Long(1L);
    public static final Long Notification = new Long(2L);
    public static final Long NAK = new Long(3L);
    public static final Long MD5Challenge = new Long(4L);
    public static final Long OneTimePassword = new Long(5L);
    public static final Long GenericTokenCard = new Long(6L);
    public static final Long RSAPublicKey = new Long(9L);
    public static final Long DSSUnilateral = new Long(10L);
    public static final Long KEA = new Long(11L);
    public static final Long KEAValidate = new Long(12L);
    public static final Long EAPTLS = new Long(13L);
    public static final Long DefenderToken = new Long(14L);
    public static final Long RSASecurIDEAP = new Long(15L);
    public static final Long ArcotSystemsEAP = new Long(16L);
    public static final Long CiscoLEAP = new Long(17L);
    public static final Long NokiaIPSmartCard = new Long(18L);
    public static final Long SIM = new Long(18L);
    public static final Long SRPSHA1Part1 = new Long(19L);
    public static final Long SRPSHA1Part2 = new Long(20L);
    public static final Long EAPTTLS = new Long(21L);
    public static final Long RemoteAccessService = new Long(22L);
    public static final Long UMTS = new Long(23L);
    public static final Long EAP3ComWireless = new Long(24L);
    public static final Long PEAP = new Long(25L);
    public static final Long MSEAPAuthentication = new Long(26L);
    public static final Long MicrosoftMSCHAPv2 = new Long(26L);
    public static final Long MSCHAPV2 = new Long(26L);
    public static final Long MAKE = new Long(27L);
    public static final Long CRYPTOCard = new Long(28L);
    public static final Long EAPMSCHAPV2 = new Long(29L);
    public static final Long CiscoMSCHAPv2 = new Long(29L);
    public static final Long DynamID = new Long(30L);
    public static final Long RobEAP = new Long(31L);
    public static final Long SecurIDEAP = new Long(32L);
    public static final Long MSAuthenticationTLV = new Long(33L);
    public static final Long SentriNET = new Long(34L);
    public static final Long EAPActiontecWireless = new Long(35L);
    public static final Long CogentBiomentricEAP = new Long(36L);
    public static final Long AirFortressEAP = new Long(37L);
    public static final Long EAPHTTPDigest = new Long(38L);
    public static final Long SecuriSuiteEAP = new Long(39L);
    public static final Long DeviceConnectEAP = new Long(40L);
    public static final Long EAPSPEKE = new Long(41L);
    public static final Long EAPMOBAC = new Long(42L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L),new Long(33L),new Long(34L),new Long(35L),new Long(36L),new Long(37L),new Long(38L),new Long(39L),new Long(40L),new Long(41L),new Long(42L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("None".equals(name)) return new Long(0L);
            if ("Identity".equals(name)) return new Long(1L);
            if ("Notification".equals(name)) return new Long(2L);
            if ("NAK".equals(name)) return new Long(3L);
            if ("MD5-Challenge".equals(name)) return new Long(4L);
            if ("One-Time-Password".equals(name)) return new Long(5L);
            if ("Generic-Token-Card".equals(name)) return new Long(6L);
            if ("RSA-Public-Key".equals(name)) return new Long(9L);
            if ("DSS-Unilateral".equals(name)) return new Long(10L);
            if ("KEA".equals(name)) return new Long(11L);
            if ("KEA-Validate".equals(name)) return new Long(12L);
            if ("EAP-TLS".equals(name)) return new Long(13L);
            if ("Defender-Token".equals(name)) return new Long(14L);
            if ("RSA-SecurID-EAP".equals(name)) return new Long(15L);
            if ("Arcot-Systems-EAP".equals(name)) return new Long(16L);
            if ("Cisco-LEAP".equals(name)) return new Long(17L);
            if ("Nokia-IP-Smart-Card".equals(name)) return new Long(18L);
            if ("SIM".equals(name)) return new Long(18L);
            if ("SRP-SHA1-Part-1".equals(name)) return new Long(19L);
            if ("SRP-SHA1-Part-2".equals(name)) return new Long(20L);
            if ("EAP-TTLS".equals(name)) return new Long(21L);
            if ("Remote-Access-Service".equals(name)) return new Long(22L);
            if ("UMTS".equals(name)) return new Long(23L);
            if ("EAP-3Com-Wireless".equals(name)) return new Long(24L);
            if ("PEAP".equals(name)) return new Long(25L);
            if ("MS-EAP-Authentication".equals(name)) return new Long(26L);
            if ("Microsoft-MS-CHAPv2".equals(name)) return new Long(26L);
            if ("MS-CHAP-V2".equals(name)) return new Long(26L);
            if ("MAKE".equals(name)) return new Long(27L);
            if ("CRYPTOCard".equals(name)) return new Long(28L);
            if ("EAP-MSCHAP-V2".equals(name)) return new Long(29L);
            if ("Cisco-MS-CHAPv2".equals(name)) return new Long(29L);
            if ("DynamID".equals(name)) return new Long(30L);
            if ("Rob-EAP".equals(name)) return new Long(31L);
            if ("SecurID-EAP".equals(name)) return new Long(32L);
            if ("MS-Authentication-TLV".equals(name)) return new Long(33L);
            if ("SentriNET".equals(name)) return new Long(34L);
            if ("EAP-Actiontec-Wireless".equals(name)) return new Long(35L);
            if ("Cogent-Biomentric-EAP".equals(name)) return new Long(36L);
            if ("AirFortress-EAP".equals(name)) return new Long(37L);
            if ("EAP-HTTP-Digest".equals(name)) return new Long(38L);
            if ("SecuriSuite-EAP".equals(name)) return new Long(39L);
            if ("DeviceConnect-EAP".equals(name)) return new Long(40L);
            if ("EAP-SPEKE".equals(name)) return new Long(41L);
            if ("EAP-MOBAC".equals(name)) return new Long(42L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "None";
            if (new Long(1L).equals(value)) return "Identity";
            if (new Long(2L).equals(value)) return "Notification";
            if (new Long(3L).equals(value)) return "NAK";
            if (new Long(4L).equals(value)) return "MD5-Challenge";
            if (new Long(5L).equals(value)) return "One-Time-Password";
            if (new Long(6L).equals(value)) return "Generic-Token-Card";
            if (new Long(9L).equals(value)) return "RSA-Public-Key";
            if (new Long(10L).equals(value)) return "DSS-Unilateral";
            if (new Long(11L).equals(value)) return "KEA";
            if (new Long(12L).equals(value)) return "KEA-Validate";
            if (new Long(13L).equals(value)) return "EAP-TLS";
            if (new Long(14L).equals(value)) return "Defender-Token";
            if (new Long(15L).equals(value)) return "RSA-SecurID-EAP";
            if (new Long(16L).equals(value)) return "Arcot-Systems-EAP";
            if (new Long(17L).equals(value)) return "Cisco-LEAP";
            if (new Long(18L).equals(value)) return "Nokia-IP-Smart-Card";
            if (new Long(19L).equals(value)) return "SRP-SHA1-Part-1";
            if (new Long(20L).equals(value)) return "SRP-SHA1-Part-2";
            if (new Long(21L).equals(value)) return "EAP-TTLS";
            if (new Long(22L).equals(value)) return "Remote-Access-Service";
            if (new Long(23L).equals(value)) return "UMTS";
            if (new Long(24L).equals(value)) return "EAP-3Com-Wireless";
            if (new Long(25L).equals(value)) return "PEAP";
            if (new Long(26L).equals(value)) return "MS-EAP-Authentication";
            if (new Long(27L).equals(value)) return "MAKE";
            if (new Long(28L).equals(value)) return "CRYPTOCard";
            if (new Long(29L).equals(value)) return "EAP-MSCHAP-V2";
            if (new Long(30L).equals(value)) return "DynamID";
            if (new Long(31L).equals(value)) return "Rob-EAP";
            if (new Long(32L).equals(value)) return "SecurID-EAP";
            if (new Long(33L).equals(value)) return "MS-Authentication-TLV";
            if (new Long(34L).equals(value)) return "SentriNET";
            if (new Long(35L).equals(value)) return "EAP-Actiontec-Wireless";
            if (new Long(36L).equals(value)) return "Cogent-Biomentric-EAP";
            if (new Long(37L).equals(value)) return "AirFortress-EAP";
            if (new Long(38L).equals(value)) return "EAP-HTTP-Digest";
            if (new Long(39L).equals(value)) return "SecuriSuite-EAP";
            if (new Long(40L).equals(value)) return "DeviceConnect-EAP";
            if (new Long(41L).equals(value)) return "EAP-SPEKE";
            if (new Long(42L).equals(value)) return "EAP-MOBAC";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 1018;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_EAPType()
    {
        setup();
    }

    public Attr_EAPType(Serializable o)
    {
        setup(o);
    }
}
