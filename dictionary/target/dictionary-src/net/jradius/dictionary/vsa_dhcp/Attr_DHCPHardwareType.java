// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_dhcp;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;
import net.jradius.packet.attribute.value.IntegerValue;

/**
 * Attribute Name: DHCP-Hardware-Type<br>
 * Attribute Type: 26<br>
 * Vendor Id: 54<br>
 * VSA Type: 257<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Ethernet (1)
 * <li> Experiemental-Ethernet (2)
 * <li> AX.25 (3)
 * <li> Proteon-Token-Ring (4)
 * <li> Chaos (5)
 * <li> IEEE-802 (6)
 * <li> Arcnet (7)
 * <li> Hyperchannel (8)
 * <li> Lanstar (9)
 * <li> Autonet-Short-Address (10)
 * <li> LocalTalk (11)
 * <li> LocalNet (12)
 * <li> Ultra-Link (13)
 * <li> SMDS (14)
 * <li> Frame-Relay (15)
 * <li> ATM-16 (16)
 * <li> HDLC (17)
 * <li> Fibre-Channel (18)
 * <li> ATM-19 (19)
 * <li> Serial-Line (20)
 * <li> ATM-21 (21)
 * <li> MIL-STD-188-220 (22)
 * <li> Metricom (23)
 * <li> IEEE-1394 (24)
 * <li> MAPOS (25)
 * <li> Twinaxial (26)
 * <li> EUI-64 (27)
 * <li> HIPARP (28)
 * <li> IP-Over-ISO-7816-3 (29)
 * <li> ARPSec (30)
 * <li> IPSec-Tunnel (31)
 * <li> Infiniband (32)
 * <li> CAI-TIA-102 (33)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_DHCPHardwareType extends VSAttribute
{
    public static final String NAME = "DHCP-Hardware-Type";
    public static final int VENDOR_ID = 54;
    public static final int VSA_TYPE = 257;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long Ethernet = new Long(1L);
    public static final Long ExperiementalEthernet = new Long(2L);
    public static final Long AX25 = new Long(3L);
    public static final Long ProteonTokenRing = new Long(4L);
    public static final Long Chaos = new Long(5L);
    public static final Long IEEE802 = new Long(6L);
    public static final Long Arcnet = new Long(7L);
    public static final Long Hyperchannel = new Long(8L);
    public static final Long Lanstar = new Long(9L);
    public static final Long AutonetShortAddress = new Long(10L);
    public static final Long LocalTalk = new Long(11L);
    public static final Long LocalNet = new Long(12L);
    public static final Long UltraLink = new Long(13L);
    public static final Long SMDS = new Long(14L);
    public static final Long FrameRelay = new Long(15L);
    public static final Long ATM16 = new Long(16L);
    public static final Long HDLC = new Long(17L);
    public static final Long FibreChannel = new Long(18L);
    public static final Long ATM19 = new Long(19L);
    public static final Long SerialLine = new Long(20L);
    public static final Long ATM21 = new Long(21L);
    public static final Long MILSTD188220 = new Long(22L);
    public static final Long Metricom = new Long(23L);
    public static final Long IEEE1394 = new Long(24L);
    public static final Long MAPOS = new Long(25L);
    public static final Long Twinaxial = new Long(26L);
    public static final Long EUI64 = new Long(27L);
    public static final Long HIPARP = new Long(28L);
    public static final Long IPOverISO78163 = new Long(29L);
    public static final Long ARPSec = new Long(30L);
    public static final Long IPSecTunnel = new Long(31L);
    public static final Long Infiniband = new Long(32L);
    public static final Long CAITIA102 = new Long(33L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L),new Long(33L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Ethernet".equals(name)) return new Long(1L);
            if ("Experiemental-Ethernet".equals(name)) return new Long(2L);
            if ("AX.25".equals(name)) return new Long(3L);
            if ("Proteon-Token-Ring".equals(name)) return new Long(4L);
            if ("Chaos".equals(name)) return new Long(5L);
            if ("IEEE-802".equals(name)) return new Long(6L);
            if ("Arcnet".equals(name)) return new Long(7L);
            if ("Hyperchannel".equals(name)) return new Long(8L);
            if ("Lanstar".equals(name)) return new Long(9L);
            if ("Autonet-Short-Address".equals(name)) return new Long(10L);
            if ("LocalTalk".equals(name)) return new Long(11L);
            if ("LocalNet".equals(name)) return new Long(12L);
            if ("Ultra-Link".equals(name)) return new Long(13L);
            if ("SMDS".equals(name)) return new Long(14L);
            if ("Frame-Relay".equals(name)) return new Long(15L);
            if ("ATM-16".equals(name)) return new Long(16L);
            if ("HDLC".equals(name)) return new Long(17L);
            if ("Fibre-Channel".equals(name)) return new Long(18L);
            if ("ATM-19".equals(name)) return new Long(19L);
            if ("Serial-Line".equals(name)) return new Long(20L);
            if ("ATM-21".equals(name)) return new Long(21L);
            if ("MIL-STD-188-220".equals(name)) return new Long(22L);
            if ("Metricom".equals(name)) return new Long(23L);
            if ("IEEE-1394".equals(name)) return new Long(24L);
            if ("MAPOS".equals(name)) return new Long(25L);
            if ("Twinaxial".equals(name)) return new Long(26L);
            if ("EUI-64".equals(name)) return new Long(27L);
            if ("HIPARP".equals(name)) return new Long(28L);
            if ("IP-Over-ISO-7816-3".equals(name)) return new Long(29L);
            if ("ARPSec".equals(name)) return new Long(30L);
            if ("IPSec-Tunnel".equals(name)) return new Long(31L);
            if ("Infiniband".equals(name)) return new Long(32L);
            if ("CAI-TIA-102".equals(name)) return new Long(33L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "Ethernet";
            if (new Long(2L).equals(value)) return "Experiemental-Ethernet";
            if (new Long(3L).equals(value)) return "AX.25";
            if (new Long(4L).equals(value)) return "Proteon-Token-Ring";
            if (new Long(5L).equals(value)) return "Chaos";
            if (new Long(6L).equals(value)) return "IEEE-802";
            if (new Long(7L).equals(value)) return "Arcnet";
            if (new Long(8L).equals(value)) return "Hyperchannel";
            if (new Long(9L).equals(value)) return "Lanstar";
            if (new Long(10L).equals(value)) return "Autonet-Short-Address";
            if (new Long(11L).equals(value)) return "LocalTalk";
            if (new Long(12L).equals(value)) return "LocalNet";
            if (new Long(13L).equals(value)) return "Ultra-Link";
            if (new Long(14L).equals(value)) return "SMDS";
            if (new Long(15L).equals(value)) return "Frame-Relay";
            if (new Long(16L).equals(value)) return "ATM-16";
            if (new Long(17L).equals(value)) return "HDLC";
            if (new Long(18L).equals(value)) return "Fibre-Channel";
            if (new Long(19L).equals(value)) return "ATM-19";
            if (new Long(20L).equals(value)) return "Serial-Line";
            if (new Long(21L).equals(value)) return "ATM-21";
            if (new Long(22L).equals(value)) return "MIL-STD-188-220";
            if (new Long(23L).equals(value)) return "Metricom";
            if (new Long(24L).equals(value)) return "IEEE-1394";
            if (new Long(25L).equals(value)) return "MAPOS";
            if (new Long(26L).equals(value)) return "Twinaxial";
            if (new Long(27L).equals(value)) return "EUI-64";
            if (new Long(28L).equals(value)) return "HIPARP";
            if (new Long(29L).equals(value)) return "IP-Over-ISO-7816-3";
            if (new Long(30L).equals(value)) return "ARPSec";
            if (new Long(31L).equals(value)) return "IPSec-Tunnel";
            if (new Long(32L).equals(value)) return "Infiniband";
            if (new Long(33L).equals(value)) return "CAI-TIA-102";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("2,1");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_DHCPHardwareType()
    {
        setup();
    }

    public Attr_DHCPHardwareType(Serializable o)
    {
        setup(o);
    }
}
