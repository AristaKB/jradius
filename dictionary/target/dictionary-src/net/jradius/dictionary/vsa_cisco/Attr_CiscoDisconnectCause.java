// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary.vsa_cisco;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Cisco-Disconnect-Cause<br>
 * Attribute Type: 26<br>
 * Vendor Id: 9<br>
 * VSA Type: 195<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Unknown (2)
 * <li> CLID-Authentication-Failure (4)
 * <li> No-Carrier (10)
 * <li> Lost-Carrier (11)
 * <li> No-Detected-Result-Codes (12)
 * <li> User-Ends-Session (20)
 * <li> Idle-Timeout (21)
 * <li> Exit-Telnet-Session (22)
 * <li> No-Remote-IP-Addr (23)
 * <li> Exit-Raw-TCP (24)
 * <li> Password-Fail (25)
 * <li> Raw-TCP-Disabled (26)
 * <li> Control-C-Detected (27)
 * <li> EXEC-Program-Destroyed (28)
 * <li> Timeout-PPP-LCP (40)
 * <li> Failed-PPP-LCP-Negotiation (41)
 * <li> Failed-PPP-PAP-Auth-Fail (42)
 * <li> Failed-PPP-CHAP-Auth (43)
 * <li> Failed-PPP-Remote-Auth (44)
 * <li> PPP-Remote-Terminate (45)
 * <li> PPP-Closed-Event (46)
 * <li> Session-Timeout (100)
 * <li> Session-Failed-Security (101)
 * <li> Session-End-Callback (102)
 * <li> Invalid-Protocol (120)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_CiscoDisconnectCause extends VSAttribute
{
    public static final String NAME = "Cisco-Disconnect-Cause";
    public static final int VENDOR_ID = 9;
    public static final int VSA_TYPE = 195;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long Unknown = new Long(2L);
    public static final Long CLIDAuthenticationFailure = new Long(4L);
    public static final Long NoCarrier = new Long(10L);
    public static final Long LostCarrier = new Long(11L);
    public static final Long NoDetectedResultCodes = new Long(12L);
    public static final Long UserEndsSession = new Long(20L);
    public static final Long IdleTimeout = new Long(21L);
    public static final Long ExitTelnetSession = new Long(22L);
    public static final Long NoRemoteIPAddr = new Long(23L);
    public static final Long ExitRawTCP = new Long(24L);
    public static final Long PasswordFail = new Long(25L);
    public static final Long RawTCPDisabled = new Long(26L);
    public static final Long ControlCDetected = new Long(27L);
    public static final Long EXECProgramDestroyed = new Long(28L);
    public static final Long TimeoutPPPLCP = new Long(40L);
    public static final Long FailedPPPLCPNegotiation = new Long(41L);
    public static final Long FailedPPPPAPAuthFail = new Long(42L);
    public static final Long FailedPPPCHAPAuth = new Long(43L);
    public static final Long FailedPPPRemoteAuth = new Long(44L);
    public static final Long PPPRemoteTerminate = new Long(45L);
    public static final Long PPPClosedEvent = new Long(46L);
    public static final Long SessionTimeout = new Long(100L);
    public static final Long SessionFailedSecurity = new Long(101L);
    public static final Long SessionEndCallback = new Long(102L);
    public static final Long InvalidProtocol = new Long(120L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(2L),new Long(4L),new Long(10L),new Long(11L),new Long(12L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(40L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(46L),new Long(100L),new Long(101L),new Long(102L),new Long(120L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Unknown".equals(name)) return new Long(2L);
            if ("CLID-Authentication-Failure".equals(name)) return new Long(4L);
            if ("No-Carrier".equals(name)) return new Long(10L);
            if ("Lost-Carrier".equals(name)) return new Long(11L);
            if ("No-Detected-Result-Codes".equals(name)) return new Long(12L);
            if ("User-Ends-Session".equals(name)) return new Long(20L);
            if ("Idle-Timeout".equals(name)) return new Long(21L);
            if ("Exit-Telnet-Session".equals(name)) return new Long(22L);
            if ("No-Remote-IP-Addr".equals(name)) return new Long(23L);
            if ("Exit-Raw-TCP".equals(name)) return new Long(24L);
            if ("Password-Fail".equals(name)) return new Long(25L);
            if ("Raw-TCP-Disabled".equals(name)) return new Long(26L);
            if ("Control-C-Detected".equals(name)) return new Long(27L);
            if ("EXEC-Program-Destroyed".equals(name)) return new Long(28L);
            if ("Timeout-PPP-LCP".equals(name)) return new Long(40L);
            if ("Failed-PPP-LCP-Negotiation".equals(name)) return new Long(41L);
            if ("Failed-PPP-PAP-Auth-Fail".equals(name)) return new Long(42L);
            if ("Failed-PPP-CHAP-Auth".equals(name)) return new Long(43L);
            if ("Failed-PPP-Remote-Auth".equals(name)) return new Long(44L);
            if ("PPP-Remote-Terminate".equals(name)) return new Long(45L);
            if ("PPP-Closed-Event".equals(name)) return new Long(46L);
            if ("Session-Timeout".equals(name)) return new Long(100L);
            if ("Session-Failed-Security".equals(name)) return new Long(101L);
            if ("Session-End-Callback".equals(name)) return new Long(102L);
            if ("Invalid-Protocol".equals(name)) return new Long(120L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(2L).equals(value)) return "Unknown";
            if (new Long(4L).equals(value)) return "CLID-Authentication-Failure";
            if (new Long(10L).equals(value)) return "No-Carrier";
            if (new Long(11L).equals(value)) return "Lost-Carrier";
            if (new Long(12L).equals(value)) return "No-Detected-Result-Codes";
            if (new Long(20L).equals(value)) return "User-Ends-Session";
            if (new Long(21L).equals(value)) return "Idle-Timeout";
            if (new Long(22L).equals(value)) return "Exit-Telnet-Session";
            if (new Long(23L).equals(value)) return "No-Remote-IP-Addr";
            if (new Long(24L).equals(value)) return "Exit-Raw-TCP";
            if (new Long(25L).equals(value)) return "Password-Fail";
            if (new Long(26L).equals(value)) return "Raw-TCP-Disabled";
            if (new Long(27L).equals(value)) return "Control-C-Detected";
            if (new Long(28L).equals(value)) return "EXEC-Program-Destroyed";
            if (new Long(40L).equals(value)) return "Timeout-PPP-LCP";
            if (new Long(41L).equals(value)) return "Failed-PPP-LCP-Negotiation";
            if (new Long(42L).equals(value)) return "Failed-PPP-PAP-Auth-Fail";
            if (new Long(43L).equals(value)) return "Failed-PPP-CHAP-Auth";
            if (new Long(44L).equals(value)) return "Failed-PPP-Remote-Auth";
            if (new Long(45L).equals(value)) return "PPP-Remote-Terminate";
            if (new Long(46L).equals(value)) return "PPP-Closed-Event";
            if (new Long(100L).equals(value)) return "Session-Timeout";
            if (new Long(101L).equals(value)) return "Session-Failed-Security";
            if (new Long(102L).equals(value)) return "Session-End-Callback";
            if (new Long(120L).equals(value)) return "Invalid-Protocol";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_CiscoDisconnectCause()
    {
        setup();
    }

    public Attr_CiscoDisconnectCause(Serializable o)
    {
        setup(o);
    }
}
