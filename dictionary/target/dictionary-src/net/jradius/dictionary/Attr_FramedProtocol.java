// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Framed-Protocol<br>
 * Attribute Type: 7<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> PPP (1)
 * <li> SLIP (2)
 * <li> ARAP (3)
 * <li> Gandalf-SLML (4)
 * <li> Xylogics-IPX-SLIP (5)
 * <li> X.75-Synchronous (6)
 * <li> Ascend-ARA (255)
 * <li> Ascend-MPP (256)
 * <li> Ascend-EURAW (257)
 * <li> Ascend-EUUI (258)
 * <li> Ascend-X25 (259)
 * <li> Ascend-COMB (260)
 * <li> Ascend-FR (261)
 * <li> Ascend-MP (262)
 * <li> Ascend-FR-CIR (263)
 * <li> Bintec-X25 (0x01100002)
 * <li> Bintec-X25-PPP (0x01100003)
 * <li> Bintec-IP-LAPB (0x01100004)
 * <li> Bintec-IP-HDLC (0x01100006)
 * <li> Bintec-MPR-LAPB (0x01100007)
 * <li> Bintec-MPR-HDLC (0x01100008)
 * <li> Bintec-FRAME-RELAY (0x01100009)
 * <li> Bintec-X31-BCHAN (0x0110000a)
 * <li> Bintec-X75-PPP (0x0110000b)
 * <li> Bintec-X75BTX-PPP (0x0110000c)
 * <li> Bintec-X25-NOSIG (0x0110000d)
 * <li> Bintec-X25-PPP-OPT (0x0110000e)
 * <li> GPRS-PDP-Context (7)
 * <li> PPTP (9)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_FramedProtocol extends RadiusAttribute
{
    public static final String NAME = "Framed-Protocol";
    public static final long TYPE = 7;

    public static final long serialVersionUID = TYPE;

    public static final Long PPP = new Long(1L);
    public static final Long SLIP = new Long(2L);
    public static final Long ARAP = new Long(3L);
    public static final Long GandalfSLML = new Long(4L);
    public static final Long XylogicsIPXSLIP = new Long(5L);
    public static final Long X75Synchronous = new Long(6L);
    public static final Long AscendARA = new Long(255L);
    public static final Long AscendMPP = new Long(256L);
    public static final Long AscendEURAW = new Long(257L);
    public static final Long AscendEUUI = new Long(258L);
    public static final Long AscendX25 = new Long(259L);
    public static final Long AscendCOMB = new Long(260L);
    public static final Long AscendFR = new Long(261L);
    public static final Long AscendMP = new Long(262L);
    public static final Long AscendFRCIR = new Long(263L);
    public static final Long BintecX25 = new Long(0x01100002L);
    public static final Long BintecX25PPP = new Long(0x01100003L);
    public static final Long BintecIPLAPB = new Long(0x01100004L);
    public static final Long BintecIPHDLC = new Long(0x01100006L);
    public static final Long BintecMPRLAPB = new Long(0x01100007L);
    public static final Long BintecMPRHDLC = new Long(0x01100008L);
    public static final Long BintecFRAMERELAY = new Long(0x01100009L);
    public static final Long BintecX31BCHAN = new Long(0x0110000aL);
    public static final Long BintecX75PPP = new Long(0x0110000bL);
    public static final Long BintecX75BTXPPP = new Long(0x0110000cL);
    public static final Long BintecX25NOSIG = new Long(0x0110000dL);
    public static final Long BintecX25PPPOPT = new Long(0x0110000eL);
    public static final Long GPRSPDPContext = new Long(7L);
    public static final Long PPTP = new Long(9L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(255L),new Long(256L),new Long(257L),new Long(258L),new Long(259L),new Long(260L),new Long(261L),new Long(262L),new Long(263L),new Long(0x01100002L),new Long(0x01100003L),new Long(0x01100004L),new Long(0x01100006L),new Long(0x01100007L),new Long(0x01100008L),new Long(0x01100009L),new Long(0x0110000aL),new Long(0x0110000bL),new Long(0x0110000cL),new Long(0x0110000dL),new Long(0x0110000eL),new Long(7L),new Long(9L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("PPP".equals(name)) return new Long(1L);
            if ("SLIP".equals(name)) return new Long(2L);
            if ("ARAP".equals(name)) return new Long(3L);
            if ("Gandalf-SLML".equals(name)) return new Long(4L);
            if ("Xylogics-IPX-SLIP".equals(name)) return new Long(5L);
            if ("X.75-Synchronous".equals(name)) return new Long(6L);
            if ("Ascend-ARA".equals(name)) return new Long(255L);
            if ("Ascend-MPP".equals(name)) return new Long(256L);
            if ("Ascend-EURAW".equals(name)) return new Long(257L);
            if ("Ascend-EUUI".equals(name)) return new Long(258L);
            if ("Ascend-X25".equals(name)) return new Long(259L);
            if ("Ascend-COMB".equals(name)) return new Long(260L);
            if ("Ascend-FR".equals(name)) return new Long(261L);
            if ("Ascend-MP".equals(name)) return new Long(262L);
            if ("Ascend-FR-CIR".equals(name)) return new Long(263L);
            if ("Bintec-X25".equals(name)) return new Long(0x01100002L);
            if ("Bintec-X25-PPP".equals(name)) return new Long(0x01100003L);
            if ("Bintec-IP-LAPB".equals(name)) return new Long(0x01100004L);
            if ("Bintec-IP-HDLC".equals(name)) return new Long(0x01100006L);
            if ("Bintec-MPR-LAPB".equals(name)) return new Long(0x01100007L);
            if ("Bintec-MPR-HDLC".equals(name)) return new Long(0x01100008L);
            if ("Bintec-FRAME-RELAY".equals(name)) return new Long(0x01100009L);
            if ("Bintec-X31-BCHAN".equals(name)) return new Long(0x0110000aL);
            if ("Bintec-X75-PPP".equals(name)) return new Long(0x0110000bL);
            if ("Bintec-X75BTX-PPP".equals(name)) return new Long(0x0110000cL);
            if ("Bintec-X25-NOSIG".equals(name)) return new Long(0x0110000dL);
            if ("Bintec-X25-PPP-OPT".equals(name)) return new Long(0x0110000eL);
            if ("GPRS-PDP-Context".equals(name)) return new Long(7L);
            if ("PPTP".equals(name)) return new Long(9L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "PPP";
            if (new Long(2L).equals(value)) return "SLIP";
            if (new Long(3L).equals(value)) return "ARAP";
            if (new Long(4L).equals(value)) return "Gandalf-SLML";
            if (new Long(5L).equals(value)) return "Xylogics-IPX-SLIP";
            if (new Long(6L).equals(value)) return "X.75-Synchronous";
            if (new Long(255L).equals(value)) return "Ascend-ARA";
            if (new Long(256L).equals(value)) return "Ascend-MPP";
            if (new Long(257L).equals(value)) return "Ascend-EURAW";
            if (new Long(258L).equals(value)) return "Ascend-EUUI";
            if (new Long(259L).equals(value)) return "Ascend-X25";
            if (new Long(260L).equals(value)) return "Ascend-COMB";
            if (new Long(261L).equals(value)) return "Ascend-FR";
            if (new Long(262L).equals(value)) return "Ascend-MP";
            if (new Long(263L).equals(value)) return "Ascend-FR-CIR";
            if (new Long(0x01100002L).equals(value)) return "Bintec-X25";
            if (new Long(0x01100003L).equals(value)) return "Bintec-X25-PPP";
            if (new Long(0x01100004L).equals(value)) return "Bintec-IP-LAPB";
            if (new Long(0x01100006L).equals(value)) return "Bintec-IP-HDLC";
            if (new Long(0x01100007L).equals(value)) return "Bintec-MPR-LAPB";
            if (new Long(0x01100008L).equals(value)) return "Bintec-MPR-HDLC";
            if (new Long(0x01100009L).equals(value)) return "Bintec-FRAME-RELAY";
            if (new Long(0x0110000aL).equals(value)) return "Bintec-X31-BCHAN";
            if (new Long(0x0110000bL).equals(value)) return "Bintec-X75-PPP";
            if (new Long(0x0110000cL).equals(value)) return "Bintec-X75BTX-PPP";
            if (new Long(0x0110000dL).equals(value)) return "Bintec-X25-NOSIG";
            if (new Long(0x0110000eL).equals(value)) return "Bintec-X25-PPP-OPT";
            if (new Long(7L).equals(value)) return "GPRS-PDP-Context";
            if (new Long(9L).equals(value)) return "PPTP";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 7;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_FramedProtocol()
    {
        setup();
    }

    public Attr_FramedProtocol(Serializable o)
    {
        setup(o);
    }
}
