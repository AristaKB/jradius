// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-Call-Event-Code<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0xBE62<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> notSupported (1)
 * <li> setup (2)
 * <li> usrSetup (3)
 * <li> telcoDisconnect (4)
 * <li> usrDisconnect (5)
 * <li> noFreeModem (6)
 * <li> modemsNotAllowed (7)
 * <li> modemsRejectCall (8)
 * <li> modemSetupTimeout (9)
 * <li> noFreeIGW (10)
 * <li> igwRejectCall (11)
 * <li> igwSetupTimeout (12)
 * <li> noFreeTdmts (13)
 * <li> bcReject (14)
 * <li> ieReject (15)
 * <li> chidReject (16)
 * <li> progReject (17)
 * <li> callingPartyReject (18)
 * <li> calledPartyReject (19)
 * <li> blocked (20)
 * <li> analogBlocked (21)
 * <li> digitalBlocked (22)
 * <li> outOfService (23)
 * <li> busy (24)
 * <li> congestion (25)
 * <li> protocolError (26)
 * <li> noFreeBchannel (27)
 * <li> inOutCallCollision (28)
 * <li> inCallArrival (29)
 * <li> outCallArrival (30)
 * <li> inCallConnect (31)
 * <li> outCallConnect (32)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRCallEventCode extends VSAttribute
{
    public static final String NAME = "USR-Call-Event-Code";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0xBE62;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long notSupported = new Long(1L);
    public static final Long setup = new Long(2L);
    public static final Long usrSetup = new Long(3L);
    public static final Long telcoDisconnect = new Long(4L);
    public static final Long usrDisconnect = new Long(5L);
    public static final Long noFreeModem = new Long(6L);
    public static final Long modemsNotAllowed = new Long(7L);
    public static final Long modemsRejectCall = new Long(8L);
    public static final Long modemSetupTimeout = new Long(9L);
    public static final Long noFreeIGW = new Long(10L);
    public static final Long igwRejectCall = new Long(11L);
    public static final Long igwSetupTimeout = new Long(12L);
    public static final Long noFreeTdmts = new Long(13L);
    public static final Long bcReject = new Long(14L);
    public static final Long ieReject = new Long(15L);
    public static final Long chidReject = new Long(16L);
    public static final Long progReject = new Long(17L);
    public static final Long callingPartyReject = new Long(18L);
    public static final Long calledPartyReject = new Long(19L);
    public static final Long blocked = new Long(20L);
    public static final Long analogBlocked = new Long(21L);
    public static final Long digitalBlocked = new Long(22L);
    public static final Long outOfService = new Long(23L);
    public static final Long busy = new Long(24L);
    public static final Long congestion = new Long(25L);
    public static final Long protocolError = new Long(26L);
    public static final Long noFreeBchannel = new Long(27L);
    public static final Long inOutCallCollision = new Long(28L);
    public static final Long inCallArrival = new Long(29L);
    public static final Long outCallArrival = new Long(30L);
    public static final Long inCallConnect = new Long(31L);
    public static final Long outCallConnect = new Long(32L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("notSupported".equals(name)) return new Long(1L);
            if ("setup".equals(name)) return new Long(2L);
            if ("usrSetup".equals(name)) return new Long(3L);
            if ("telcoDisconnect".equals(name)) return new Long(4L);
            if ("usrDisconnect".equals(name)) return new Long(5L);
            if ("noFreeModem".equals(name)) return new Long(6L);
            if ("modemsNotAllowed".equals(name)) return new Long(7L);
            if ("modemsRejectCall".equals(name)) return new Long(8L);
            if ("modemSetupTimeout".equals(name)) return new Long(9L);
            if ("noFreeIGW".equals(name)) return new Long(10L);
            if ("igwRejectCall".equals(name)) return new Long(11L);
            if ("igwSetupTimeout".equals(name)) return new Long(12L);
            if ("noFreeTdmts".equals(name)) return new Long(13L);
            if ("bcReject".equals(name)) return new Long(14L);
            if ("ieReject".equals(name)) return new Long(15L);
            if ("chidReject".equals(name)) return new Long(16L);
            if ("progReject".equals(name)) return new Long(17L);
            if ("callingPartyReject".equals(name)) return new Long(18L);
            if ("calledPartyReject".equals(name)) return new Long(19L);
            if ("blocked".equals(name)) return new Long(20L);
            if ("analogBlocked".equals(name)) return new Long(21L);
            if ("digitalBlocked".equals(name)) return new Long(22L);
            if ("outOfService".equals(name)) return new Long(23L);
            if ("busy".equals(name)) return new Long(24L);
            if ("congestion".equals(name)) return new Long(25L);
            if ("protocolError".equals(name)) return new Long(26L);
            if ("noFreeBchannel".equals(name)) return new Long(27L);
            if ("inOutCallCollision".equals(name)) return new Long(28L);
            if ("inCallArrival".equals(name)) return new Long(29L);
            if ("outCallArrival".equals(name)) return new Long(30L);
            if ("inCallConnect".equals(name)) return new Long(31L);
            if ("outCallConnect".equals(name)) return new Long(32L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "notSupported";
            if (new Long(2L).equals(value)) return "setup";
            if (new Long(3L).equals(value)) return "usrSetup";
            if (new Long(4L).equals(value)) return "telcoDisconnect";
            if (new Long(5L).equals(value)) return "usrDisconnect";
            if (new Long(6L).equals(value)) return "noFreeModem";
            if (new Long(7L).equals(value)) return "modemsNotAllowed";
            if (new Long(8L).equals(value)) return "modemsRejectCall";
            if (new Long(9L).equals(value)) return "modemSetupTimeout";
            if (new Long(10L).equals(value)) return "noFreeIGW";
            if (new Long(11L).equals(value)) return "igwRejectCall";
            if (new Long(12L).equals(value)) return "igwSetupTimeout";
            if (new Long(13L).equals(value)) return "noFreeTdmts";
            if (new Long(14L).equals(value)) return "bcReject";
            if (new Long(15L).equals(value)) return "ieReject";
            if (new Long(16L).equals(value)) return "chidReject";
            if (new Long(17L).equals(value)) return "progReject";
            if (new Long(18L).equals(value)) return "callingPartyReject";
            if (new Long(19L).equals(value)) return "calledPartyReject";
            if (new Long(20L).equals(value)) return "blocked";
            if (new Long(21L).equals(value)) return "analogBlocked";
            if (new Long(22L).equals(value)) return "digitalBlocked";
            if (new Long(23L).equals(value)) return "outOfService";
            if (new Long(24L).equals(value)) return "busy";
            if (new Long(25L).equals(value)) return "congestion";
            if (new Long(26L).equals(value)) return "protocolError";
            if (new Long(27L).equals(value)) return "noFreeBchannel";
            if (new Long(28L).equals(value)) return "inOutCallCollision";
            if (new Long(29L).equals(value)) return "inCallArrival";
            if (new Long(30L).equals(value)) return "outCallArrival";
            if (new Long(31L).equals(value)) return "inCallConnect";
            if (new Long(32L).equals(value)) return "outCallConnect";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRCallEventCode()
    {
        setup();
    }

    public Attr_USRCallEventCode(Serializable o)
    {
        setup(o);
    }
}
