// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-RMMIE-x2-Status<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0x0909<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> notOperational (1)
 * <li> operational (2)
 * <li> x2Disabled (3)
 * <li> v8Disabled (4)
 * <li> remote3200Disabled (5)
 * <li> invalidSpeedSetting (6)
 * <li> v8NotDetected (7)
 * <li> x2NotDetected (8)
 * <li> incompatibleVersion (9)
 * <li> incompatibleModes (10)
 * <li> local3200Disabled (11)
 * <li> excessHighFrequencyAtten (12)
 * <li> connectNotSupport3200 (13)
 * <li> retrainBeforeConnection (14)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRRMMIEx2Status extends VSAttribute
{
    public static final String NAME = "USR-RMMIE-x2-Status";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0x0909;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long notOperational = new Long(1L);
    public static final Long operational = new Long(2L);
    public static final Long x2Disabled = new Long(3L);
    public static final Long v8Disabled = new Long(4L);
    public static final Long remote3200Disabled = new Long(5L);
    public static final Long invalidSpeedSetting = new Long(6L);
    public static final Long v8NotDetected = new Long(7L);
    public static final Long x2NotDetected = new Long(8L);
    public static final Long incompatibleVersion = new Long(9L);
    public static final Long incompatibleModes = new Long(10L);
    public static final Long local3200Disabled = new Long(11L);
    public static final Long excessHighFrequencyAtten = new Long(12L);
    public static final Long connectNotSupport3200 = new Long(13L);
    public static final Long retrainBeforeConnection = new Long(14L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("notOperational".equals(name)) return new Long(1L);
            if ("operational".equals(name)) return new Long(2L);
            if ("x2Disabled".equals(name)) return new Long(3L);
            if ("v8Disabled".equals(name)) return new Long(4L);
            if ("remote3200Disabled".equals(name)) return new Long(5L);
            if ("invalidSpeedSetting".equals(name)) return new Long(6L);
            if ("v8NotDetected".equals(name)) return new Long(7L);
            if ("x2NotDetected".equals(name)) return new Long(8L);
            if ("incompatibleVersion".equals(name)) return new Long(9L);
            if ("incompatibleModes".equals(name)) return new Long(10L);
            if ("local3200Disabled".equals(name)) return new Long(11L);
            if ("excessHighFrequencyAtten".equals(name)) return new Long(12L);
            if ("connectNotSupport3200".equals(name)) return new Long(13L);
            if ("retrainBeforeConnection".equals(name)) return new Long(14L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "notOperational";
            if (new Long(2L).equals(value)) return "operational";
            if (new Long(3L).equals(value)) return "x2Disabled";
            if (new Long(4L).equals(value)) return "v8Disabled";
            if (new Long(5L).equals(value)) return "remote3200Disabled";
            if (new Long(6L).equals(value)) return "invalidSpeedSetting";
            if (new Long(7L).equals(value)) return "v8NotDetected";
            if (new Long(8L).equals(value)) return "x2NotDetected";
            if (new Long(9L).equals(value)) return "incompatibleVersion";
            if (new Long(10L).equals(value)) return "incompatibleModes";
            if (new Long(11L).equals(value)) return "local3200Disabled";
            if (new Long(12L).equals(value)) return "excessHighFrequencyAtten";
            if (new Long(13L).equals(value)) return "connectNotSupport3200";
            if (new Long(14L).equals(value)) return "retrainBeforeConnection";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRRMMIEx2Status()
    {
        setup();
    }

    public Attr_USRRMMIEx2Status(Serializable o)
    {
        setup(o);
    }
}
