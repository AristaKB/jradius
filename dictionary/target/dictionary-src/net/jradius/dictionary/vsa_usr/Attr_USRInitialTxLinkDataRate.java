// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-Initial-Tx-Link-Data-Rate<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0x006A<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> 110-BPS (1)
 * <li> 300-BPS (2)
 * <li> 600-BPS (3)
 * <li> 1200-BPS (4)
 * <li> 2400-BPS (5)
 * <li> 4800-BPS (6)
 * <li> 7200-BPS (7)
 * <li> 9600-BPS (8)
 * <li> 12000-BPS (9)
 * <li> 14400-BPS (10)
 * <li> 16800-BPS (11)
 * <li> 19200-BPS (12)
 * <li> 38400-BPS (13)
 * <li> 75-BPS (14)
 * <li> 450-BPS (15)
 * <li> UNKNOWN-BPS (16)
 * <li> 57600-BPS (17)
 * <li> 21600-BPS (18)
 * <li> 24000-BPS (19)
 * <li> 26400-BPS (20)
 * <li> 28800-BPS (21)
 * <li> 115200-BPS (22)
 * <li> 31200-BPS (23)
 * <li> 33600-BPS (24)
 * <li> 25333-BPS (25)
 * <li> 26666-BPS (26)
 * <li> 28000-BPS (27)
 * <li> 29333-BPS (28)
 * <li> 30666-BPS (29)
 * <li> 32000-BPS (30)
 * <li> 33333-BPS (31)
 * <li> 34666-BPS (32)
 * <li> 36000-BPS (33)
 * <li> 37333-BPS (34)
 * <li> 38666-BPS (35)
 * <li> 40000-BPS (36)
 * <li> 41333-BPS (37)
 * <li> 42666-BPS (38)
 * <li> 44000-BPS (39)
 * <li> 45333-BPS (40)
 * <li> 46666-BPS (41)
 * <li> 48000-BPS (42)
 * <li> 49333-BPS (43)
 * <li> 50666-BPS (44)
 * <li> 52000-BPS (45)
 * <li> 53333-BPS (46)
 * <li> 54666-BPS (47)
 * <li> 56000-BPS (48)
 * <li> 57333-BPS (49)
 * <li> 58666-BPS (50)
 * <li> 60000-BPS (51)
 * <li> 61333-BPS (52)
 * <li> 62666-BPS (53)
 * <li> 64000-BPS (54)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRInitialTxLinkDataRate extends VSAttribute
{
    public static final String NAME = "USR-Initial-Tx-Link-Data-Rate";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0x006A;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long _110BPS = new Long(1L);
    public static final Long _300BPS = new Long(2L);
    public static final Long _600BPS = new Long(3L);
    public static final Long _1200BPS = new Long(4L);
    public static final Long _2400BPS = new Long(5L);
    public static final Long _4800BPS = new Long(6L);
    public static final Long _7200BPS = new Long(7L);
    public static final Long _9600BPS = new Long(8L);
    public static final Long _12000BPS = new Long(9L);
    public static final Long _14400BPS = new Long(10L);
    public static final Long _16800BPS = new Long(11L);
    public static final Long _19200BPS = new Long(12L);
    public static final Long _38400BPS = new Long(13L);
    public static final Long _75BPS = new Long(14L);
    public static final Long _450BPS = new Long(15L);
    public static final Long UNKNOWNBPS = new Long(16L);
    public static final Long _57600BPS = new Long(17L);
    public static final Long _21600BPS = new Long(18L);
    public static final Long _24000BPS = new Long(19L);
    public static final Long _26400BPS = new Long(20L);
    public static final Long _28800BPS = new Long(21L);
    public static final Long _115200BPS = new Long(22L);
    public static final Long _31200BPS = new Long(23L);
    public static final Long _33600BPS = new Long(24L);
    public static final Long _25333BPS = new Long(25L);
    public static final Long _26666BPS = new Long(26L);
    public static final Long _28000BPS = new Long(27L);
    public static final Long _29333BPS = new Long(28L);
    public static final Long _30666BPS = new Long(29L);
    public static final Long _32000BPS = new Long(30L);
    public static final Long _33333BPS = new Long(31L);
    public static final Long _34666BPS = new Long(32L);
    public static final Long _36000BPS = new Long(33L);
    public static final Long _37333BPS = new Long(34L);
    public static final Long _38666BPS = new Long(35L);
    public static final Long _40000BPS = new Long(36L);
    public static final Long _41333BPS = new Long(37L);
    public static final Long _42666BPS = new Long(38L);
    public static final Long _44000BPS = new Long(39L);
    public static final Long _45333BPS = new Long(40L);
    public static final Long _46666BPS = new Long(41L);
    public static final Long _48000BPS = new Long(42L);
    public static final Long _49333BPS = new Long(43L);
    public static final Long _50666BPS = new Long(44L);
    public static final Long _52000BPS = new Long(45L);
    public static final Long _53333BPS = new Long(46L);
    public static final Long _54666BPS = new Long(47L);
    public static final Long _56000BPS = new Long(48L);
    public static final Long _57333BPS = new Long(49L);
    public static final Long _58666BPS = new Long(50L);
    public static final Long _60000BPS = new Long(51L);
    public static final Long _61333BPS = new Long(52L);
    public static final Long _62666BPS = new Long(53L);
    public static final Long _64000BPS = new Long(54L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L),new Long(33L),new Long(34L),new Long(35L),new Long(36L),new Long(37L),new Long(38L),new Long(39L),new Long(40L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(46L),new Long(47L),new Long(48L),new Long(49L),new Long(50L),new Long(51L),new Long(52L),new Long(53L),new Long(54L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("110-BPS".equals(name)) return new Long(1L);
            if ("300-BPS".equals(name)) return new Long(2L);
            if ("600-BPS".equals(name)) return new Long(3L);
            if ("1200-BPS".equals(name)) return new Long(4L);
            if ("2400-BPS".equals(name)) return new Long(5L);
            if ("4800-BPS".equals(name)) return new Long(6L);
            if ("7200-BPS".equals(name)) return new Long(7L);
            if ("9600-BPS".equals(name)) return new Long(8L);
            if ("12000-BPS".equals(name)) return new Long(9L);
            if ("14400-BPS".equals(name)) return new Long(10L);
            if ("16800-BPS".equals(name)) return new Long(11L);
            if ("19200-BPS".equals(name)) return new Long(12L);
            if ("38400-BPS".equals(name)) return new Long(13L);
            if ("75-BPS".equals(name)) return new Long(14L);
            if ("450-BPS".equals(name)) return new Long(15L);
            if ("UNKNOWN-BPS".equals(name)) return new Long(16L);
            if ("57600-BPS".equals(name)) return new Long(17L);
            if ("21600-BPS".equals(name)) return new Long(18L);
            if ("24000-BPS".equals(name)) return new Long(19L);
            if ("26400-BPS".equals(name)) return new Long(20L);
            if ("28800-BPS".equals(name)) return new Long(21L);
            if ("115200-BPS".equals(name)) return new Long(22L);
            if ("31200-BPS".equals(name)) return new Long(23L);
            if ("33600-BPS".equals(name)) return new Long(24L);
            if ("25333-BPS".equals(name)) return new Long(25L);
            if ("26666-BPS".equals(name)) return new Long(26L);
            if ("28000-BPS".equals(name)) return new Long(27L);
            if ("29333-BPS".equals(name)) return new Long(28L);
            if ("30666-BPS".equals(name)) return new Long(29L);
            if ("32000-BPS".equals(name)) return new Long(30L);
            if ("33333-BPS".equals(name)) return new Long(31L);
            if ("34666-BPS".equals(name)) return new Long(32L);
            if ("36000-BPS".equals(name)) return new Long(33L);
            if ("37333-BPS".equals(name)) return new Long(34L);
            if ("38666-BPS".equals(name)) return new Long(35L);
            if ("40000-BPS".equals(name)) return new Long(36L);
            if ("41333-BPS".equals(name)) return new Long(37L);
            if ("42666-BPS".equals(name)) return new Long(38L);
            if ("44000-BPS".equals(name)) return new Long(39L);
            if ("45333-BPS".equals(name)) return new Long(40L);
            if ("46666-BPS".equals(name)) return new Long(41L);
            if ("48000-BPS".equals(name)) return new Long(42L);
            if ("49333-BPS".equals(name)) return new Long(43L);
            if ("50666-BPS".equals(name)) return new Long(44L);
            if ("52000-BPS".equals(name)) return new Long(45L);
            if ("53333-BPS".equals(name)) return new Long(46L);
            if ("54666-BPS".equals(name)) return new Long(47L);
            if ("56000-BPS".equals(name)) return new Long(48L);
            if ("57333-BPS".equals(name)) return new Long(49L);
            if ("58666-BPS".equals(name)) return new Long(50L);
            if ("60000-BPS".equals(name)) return new Long(51L);
            if ("61333-BPS".equals(name)) return new Long(52L);
            if ("62666-BPS".equals(name)) return new Long(53L);
            if ("64000-BPS".equals(name)) return new Long(54L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "110-BPS";
            if (new Long(2L).equals(value)) return "300-BPS";
            if (new Long(3L).equals(value)) return "600-BPS";
            if (new Long(4L).equals(value)) return "1200-BPS";
            if (new Long(5L).equals(value)) return "2400-BPS";
            if (new Long(6L).equals(value)) return "4800-BPS";
            if (new Long(7L).equals(value)) return "7200-BPS";
            if (new Long(8L).equals(value)) return "9600-BPS";
            if (new Long(9L).equals(value)) return "12000-BPS";
            if (new Long(10L).equals(value)) return "14400-BPS";
            if (new Long(11L).equals(value)) return "16800-BPS";
            if (new Long(12L).equals(value)) return "19200-BPS";
            if (new Long(13L).equals(value)) return "38400-BPS";
            if (new Long(14L).equals(value)) return "75-BPS";
            if (new Long(15L).equals(value)) return "450-BPS";
            if (new Long(16L).equals(value)) return "UNKNOWN-BPS";
            if (new Long(17L).equals(value)) return "57600-BPS";
            if (new Long(18L).equals(value)) return "21600-BPS";
            if (new Long(19L).equals(value)) return "24000-BPS";
            if (new Long(20L).equals(value)) return "26400-BPS";
            if (new Long(21L).equals(value)) return "28800-BPS";
            if (new Long(22L).equals(value)) return "115200-BPS";
            if (new Long(23L).equals(value)) return "31200-BPS";
            if (new Long(24L).equals(value)) return "33600-BPS";
            if (new Long(25L).equals(value)) return "25333-BPS";
            if (new Long(26L).equals(value)) return "26666-BPS";
            if (new Long(27L).equals(value)) return "28000-BPS";
            if (new Long(28L).equals(value)) return "29333-BPS";
            if (new Long(29L).equals(value)) return "30666-BPS";
            if (new Long(30L).equals(value)) return "32000-BPS";
            if (new Long(31L).equals(value)) return "33333-BPS";
            if (new Long(32L).equals(value)) return "34666-BPS";
            if (new Long(33L).equals(value)) return "36000-BPS";
            if (new Long(34L).equals(value)) return "37333-BPS";
            if (new Long(35L).equals(value)) return "38666-BPS";
            if (new Long(36L).equals(value)) return "40000-BPS";
            if (new Long(37L).equals(value)) return "41333-BPS";
            if (new Long(38L).equals(value)) return "42666-BPS";
            if (new Long(39L).equals(value)) return "44000-BPS";
            if (new Long(40L).equals(value)) return "45333-BPS";
            if (new Long(41L).equals(value)) return "46666-BPS";
            if (new Long(42L).equals(value)) return "48000-BPS";
            if (new Long(43L).equals(value)) return "49333-BPS";
            if (new Long(44L).equals(value)) return "50666-BPS";
            if (new Long(45L).equals(value)) return "52000-BPS";
            if (new Long(46L).equals(value)) return "53333-BPS";
            if (new Long(47L).equals(value)) return "54666-BPS";
            if (new Long(48L).equals(value)) return "56000-BPS";
            if (new Long(49L).equals(value)) return "57333-BPS";
            if (new Long(50L).equals(value)) return "58666-BPS";
            if (new Long(51L).equals(value)) return "60000-BPS";
            if (new Long(52L).equals(value)) return "61333-BPS";
            if (new Long(53L).equals(value)) return "62666-BPS";
            if (new Long(54L).equals(value)) return "64000-BPS";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRInitialTxLinkDataRate()
    {
        setup();
    }

    public Attr_USRInitialTxLinkDataRate(Serializable o)
    {
        setup(o);
    }
}
