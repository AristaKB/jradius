// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-IP-RIP-Policies<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0x982a<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> SendDefault (0x0)
 * <li> SendRoutes (0x2)
 * <li> SendSubnets (0x4)
 * <li> AcceptDefault (0x8)
 * <li> SplitHorizon (0x10)
 * <li> PoisonReserve (0x20)
 * <li> FlashUpdate (0x40)
 * <li> SimpleAuth (0x80)
 * <li> V1Send (0x100)
 * <li> V1Receive (0x200)
 * <li> V2Receive (0x400)
 * <li> Silent (0x80000000)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRIPRIPPolicies extends VSAttribute
{
    public static final String NAME = "USR-IP-RIP-Policies";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0x982a;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long SendDefault = new Long(0x0L);
    public static final Long SendRoutes = new Long(0x2L);
    public static final Long SendSubnets = new Long(0x4L);
    public static final Long AcceptDefault = new Long(0x8L);
    public static final Long SplitHorizon = new Long(0x10L);
    public static final Long PoisonReserve = new Long(0x20L);
    public static final Long FlashUpdate = new Long(0x40L);
    public static final Long SimpleAuth = new Long(0x80L);
    public static final Long V1Send = new Long(0x100L);
    public static final Long V1Receive = new Long(0x200L);
    public static final Long V2Receive = new Long(0x400L);
    public static final Long Silent = new Long(0x80000000L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0x0L),new Long(0x2L),new Long(0x4L),new Long(0x8L),new Long(0x10L),new Long(0x20L),new Long(0x40L),new Long(0x80L),new Long(0x100L),new Long(0x200L),new Long(0x400L),new Long(0x80000000L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("SendDefault".equals(name)) return new Long(0x0L);
            if ("SendRoutes".equals(name)) return new Long(0x2L);
            if ("SendSubnets".equals(name)) return new Long(0x4L);
            if ("AcceptDefault".equals(name)) return new Long(0x8L);
            if ("SplitHorizon".equals(name)) return new Long(0x10L);
            if ("PoisonReserve".equals(name)) return new Long(0x20L);
            if ("FlashUpdate".equals(name)) return new Long(0x40L);
            if ("SimpleAuth".equals(name)) return new Long(0x80L);
            if ("V1Send".equals(name)) return new Long(0x100L);
            if ("V1Receive".equals(name)) return new Long(0x200L);
            if ("V2Receive".equals(name)) return new Long(0x400L);
            if ("Silent".equals(name)) return new Long(0x80000000L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0x0L).equals(value)) return "SendDefault";
            if (new Long(0x2L).equals(value)) return "SendRoutes";
            if (new Long(0x4L).equals(value)) return "SendSubnets";
            if (new Long(0x8L).equals(value)) return "AcceptDefault";
            if (new Long(0x10L).equals(value)) return "SplitHorizon";
            if (new Long(0x20L).equals(value)) return "PoisonReserve";
            if (new Long(0x40L).equals(value)) return "FlashUpdate";
            if (new Long(0x80L).equals(value)) return "SimpleAuth";
            if (new Long(0x100L).equals(value)) return "V1Send";
            if (new Long(0x200L).equals(value)) return "V1Receive";
            if (new Long(0x400L).equals(value)) return "V2Receive";
            if (new Long(0x80000000L).equals(value)) return "Silent";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRIPRIPPolicies()
    {
        setup();
    }

    public Attr_USRIPRIPPolicies(Serializable o)
    {
        setup(o);
    }
}
