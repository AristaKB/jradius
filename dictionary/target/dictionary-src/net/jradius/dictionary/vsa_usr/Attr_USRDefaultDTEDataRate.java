// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-Default-DTE-Data-Rate<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0x005E<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> 110-BPS (1)
 * <li> 300-BPS (2)
 * <li> 600-BPS (3)
 * <li> 1200-BPS (4)
 * <li> 2400-BPS (5)
 * <li> 4800-BPS (6)
 * <li> 7200-BPS (7)
 * <li> 9600-BPS (8)
 * <li> 12K-BPS (9)
 * <li> 14.4K-BPS (10)
 * <li> 16.8-BPS (11)
 * <li> 19.2K-BPS (12)
 * <li> 38.4K-BPS (13)
 * <li> 75-BPS (14)
 * <li> 450-BPS (15)
 * <li> UNKNOWN-BPS (16)
 * <li> 57.6K-BPS (17)
 * <li> 21.6K-BPS (18)
 * <li> 24K-BPS (19)
 * <li> 26K-BPS (20)
 * <li> 28K-BPS (21)
 * <li> 115K-BPS (22)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRDefaultDTEDataRate extends VSAttribute
{
    public static final String NAME = "USR-Default-DTE-Data-Rate";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0x005E;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long _110BPS = new Long(1L);
    public static final Long _300BPS = new Long(2L);
    public static final Long _600BPS = new Long(3L);
    public static final Long _1200BPS = new Long(4L);
    public static final Long _2400BPS = new Long(5L);
    public static final Long _4800BPS = new Long(6L);
    public static final Long _7200BPS = new Long(7L);
    public static final Long _9600BPS = new Long(8L);
    public static final Long _12KBPS = new Long(9L);
    public static final Long _144KBPS = new Long(10L);
    public static final Long _168BPS = new Long(11L);
    public static final Long _192KBPS = new Long(12L);
    public static final Long _384KBPS = new Long(13L);
    public static final Long _75BPS = new Long(14L);
    public static final Long _450BPS = new Long(15L);
    public static final Long UNKNOWNBPS = new Long(16L);
    public static final Long _576KBPS = new Long(17L);
    public static final Long _216KBPS = new Long(18L);
    public static final Long _24KBPS = new Long(19L);
    public static final Long _26KBPS = new Long(20L);
    public static final Long _28KBPS = new Long(21L);
    public static final Long _115KBPS = new Long(22L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("110-BPS".equals(name)) return new Long(1L);
            if ("300-BPS".equals(name)) return new Long(2L);
            if ("600-BPS".equals(name)) return new Long(3L);
            if ("1200-BPS".equals(name)) return new Long(4L);
            if ("2400-BPS".equals(name)) return new Long(5L);
            if ("4800-BPS".equals(name)) return new Long(6L);
            if ("7200-BPS".equals(name)) return new Long(7L);
            if ("9600-BPS".equals(name)) return new Long(8L);
            if ("12K-BPS".equals(name)) return new Long(9L);
            if ("14.4K-BPS".equals(name)) return new Long(10L);
            if ("16.8-BPS".equals(name)) return new Long(11L);
            if ("19.2K-BPS".equals(name)) return new Long(12L);
            if ("38.4K-BPS".equals(name)) return new Long(13L);
            if ("75-BPS".equals(name)) return new Long(14L);
            if ("450-BPS".equals(name)) return new Long(15L);
            if ("UNKNOWN-BPS".equals(name)) return new Long(16L);
            if ("57.6K-BPS".equals(name)) return new Long(17L);
            if ("21.6K-BPS".equals(name)) return new Long(18L);
            if ("24K-BPS".equals(name)) return new Long(19L);
            if ("26K-BPS".equals(name)) return new Long(20L);
            if ("28K-BPS".equals(name)) return new Long(21L);
            if ("115K-BPS".equals(name)) return new Long(22L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "110-BPS";
            if (new Long(2L).equals(value)) return "300-BPS";
            if (new Long(3L).equals(value)) return "600-BPS";
            if (new Long(4L).equals(value)) return "1200-BPS";
            if (new Long(5L).equals(value)) return "2400-BPS";
            if (new Long(6L).equals(value)) return "4800-BPS";
            if (new Long(7L).equals(value)) return "7200-BPS";
            if (new Long(8L).equals(value)) return "9600-BPS";
            if (new Long(9L).equals(value)) return "12K-BPS";
            if (new Long(10L).equals(value)) return "14.4K-BPS";
            if (new Long(11L).equals(value)) return "16.8-BPS";
            if (new Long(12L).equals(value)) return "19.2K-BPS";
            if (new Long(13L).equals(value)) return "38.4K-BPS";
            if (new Long(14L).equals(value)) return "75-BPS";
            if (new Long(15L).equals(value)) return "450-BPS";
            if (new Long(16L).equals(value)) return "UNKNOWN-BPS";
            if (new Long(17L).equals(value)) return "57.6K-BPS";
            if (new Long(18L).equals(value)) return "21.6K-BPS";
            if (new Long(19L).equals(value)) return "24K-BPS";
            if (new Long(20L).equals(value)) return "26K-BPS";
            if (new Long(21L).equals(value)) return "28K-BPS";
            if (new Long(22L).equals(value)) return "115K-BPS";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRDefaultDTEDataRate()
    {
        setup();
    }

    public Attr_USRDefaultDTEDataRate(Serializable o)
    {
        setup(o);
    }
}
