// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-Event-Id<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0xBFBE<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Module-Inserted (6)
 * <li> Module-Removed (7)
 * <li> PSU-Voltage-Alarm (8)
 * <li> PSU-Failed (9)
 * <li> HUB-Temp-Out-of-Range (10)
 * <li> Fan-Failed (11)
 * <li> Watchdog-Timeout (12)
 * <li> Mgmt-Bus-Failure (13)
 * <li> In-Connection-Est (14)
 * <li> Out-Connection-Est (15)
 * <li> In-Connection-Term (16)
 * <li> Out-Connection-Term (17)
 * <li> Connection-Failed (18)
 * <li> Connection-Timeout (19)
 * <li> DTE-Transmit-Idle (20)
 * <li> DTR-True (21)
 * <li> DTR-False (22)
 * <li> Block-Error-at-Threshold (23)
 * <li> Fallbacks-at-Threshold (24)
 * <li> No-Dial-Tone-Detected (25)
 * <li> No-Loop-Current-Detected (26)
 * <li> Yellow-Alarm (27)
 * <li> Red-Alarm (28)
 * <li> Loss-Of-Signal (29)
 * <li> Rcv-Alrm-Ind-Signal (30)
 * <li> Timing-Source-Switch (31)
 * <li> Modem-Reset-by-DTE (32)
 * <li> Modem-Ring-No-Answer (33)
 * <li> DTE-Ring-No-Answer (34)
 * <li> Pkt-Bus-Session-Active (35)
 * <li> Pkt-Bus-Session-Congestion (36)
 * <li> Pkt-Bus-Session-Lost (37)
 * <li> Pkt-Bus-Session-Inactive (38)
 * <li> User-Interface-Reset (39)
 * <li> Gateway-Port-Out-of-Service (40)
 * <li> Gateway-Port-Link-Active (41)
 * <li> Dial-Out-Login-Failure (42)
 * <li> Dial-In-Login-Failure (43)
 * <li> Dial-Out-Restricted-Number (44)
 * <li> Dial-Back-Restricted-Number (45)
 * <li> User-Blacklisted (46)
 * <li> Attempted-Login-Blacklisted (47)
 * <li> Response-Attempt-Limit-Exceeded (48)
 * <li> Login-Attempt-Limit-Exceeded (49)
 * <li> Dial-Out-Call-Duration (50)
 * <li> Dial-In-Call-Duration (51)
 * <li> Pkt-Bus-Session-Err-Status (52)
 * <li> NMC-AutoRespnse-Trap (53)
 * <li> Acct-Server-Contact-Loss (54)
 * <li> Yellow-Alarm-Clear (55)
 * <li> Red-Alarm-Clear (56)
 * <li> Loss-Of-Signal-Clear (57)
 * <li> Rcv-Alrm-Ind-Signal-Clear (58)
 * <li> Incoming-Connection-Established (59)
 * <li> Outgoing-Connection-Established (60)
 * <li> Incoming-Connection-Terminated (61)
 * <li> Outgoing-Connection-Terminated (62)
 * <li> Connection-Attempt-Failure (63)
 * <li> Continuous-CRC-Alarm (64)
 * <li> Continuous-CRC-Alarm-Clear (65)
 * <li> Physical-State-Change (66)
 * <li> Gateway-Network-Failed (71)
 * <li> Gateway-Network-Restored (72)
 * <li> Packet-Bus-Clock-Lost (73)
 * <li> Packet-Bus-Clock-Restored (74)
 * <li> D-Channel-In-Service (75)
 * <li> D-Channel-Out-of-Service (76)
 * <li> DS0s-In-Service (77)
 * <li> DS0s-Out-of-Service (78)
 * <li> T1/T1PRI/E1PRI-Call-Event (79)
 * <li> Psu-Incompatible (80)
 * <li> T1,T1-E1/PRI-Call-Arrive-Event (81)
 * <li> T1,T1-E1/PRI-Call-Connect-Event (82)
 * <li> T1,T1-E1/PRI-Call-Termina-Event (83)
 * <li> T1,T1-E1/PRI-Call-Failed-Event (84)
 * <li> DNS-Contact-Lost (85)
 * <li> NTP-Contact-Lost (86)
 * <li> NTP-Contact-Restored (87)
 * <li> IPGW-Link-Up (88)
 * <li> IPGW-Link-Down (89)
 * <li> NTP-Contact-Degraded (90)
 * <li> In-Connection-Failed (91)
 * <li> Out-Connection-Failed (92)
 * <li> Application-ProcessorReset (93)
 * <li> DSP-Reset (94)
 * <li> Changed-to-Maint-Srvs-State (95)
 * <li> Loop-Back-cleared-on-channel (96)
 * <li> Loop-Back-on-channel (97)
 * <li> Telco-Abnormal-Response (98)
 * <li> DNS-Contact-Restored (99)
 * <li> DNS-Contact-Degraded (100)
 * <li> RADIUS-Accounting-Restored (101)
 * <li> RADIUS-Accounting-Group-Restore (102)
 * <li> RADIUS-Accounting-Group-Degrade (103)
 * <li> RADIUS-Accounting-Group-NonOper (104)
 * <li> T1/T1-E1/PRI-InCall-Fail-Event (119)
 * <li> T1/T1-E1/PRI-OutCall-Fail-Event (120)
 * <li> RMMIE-Retrain-Event (121)
 * <li> RMMIE-Speed-Shift-Event (122)
 * <li> CDMA-Call-Start (191)
 * <li> CDMA-Call-End (192)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USREventId extends VSAttribute
{
    public static final String NAME = "USR-Event-Id";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0xBFBE;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long ModuleInserted = new Long(6L);
    public static final Long ModuleRemoved = new Long(7L);
    public static final Long PSUVoltageAlarm = new Long(8L);
    public static final Long PSUFailed = new Long(9L);
    public static final Long HUBTempOutofRange = new Long(10L);
    public static final Long FanFailed = new Long(11L);
    public static final Long WatchdogTimeout = new Long(12L);
    public static final Long MgmtBusFailure = new Long(13L);
    public static final Long InConnectionEst = new Long(14L);
    public static final Long OutConnectionEst = new Long(15L);
    public static final Long InConnectionTerm = new Long(16L);
    public static final Long OutConnectionTerm = new Long(17L);
    public static final Long ConnectionFailed = new Long(18L);
    public static final Long ConnectionTimeout = new Long(19L);
    public static final Long DTETransmitIdle = new Long(20L);
    public static final Long DTRTrue = new Long(21L);
    public static final Long DTRFalse = new Long(22L);
    public static final Long BlockErroratThreshold = new Long(23L);
    public static final Long FallbacksatThreshold = new Long(24L);
    public static final Long NoDialToneDetected = new Long(25L);
    public static final Long NoLoopCurrentDetected = new Long(26L);
    public static final Long YellowAlarm = new Long(27L);
    public static final Long RedAlarm = new Long(28L);
    public static final Long LossOfSignal = new Long(29L);
    public static final Long RcvAlrmIndSignal = new Long(30L);
    public static final Long TimingSourceSwitch = new Long(31L);
    public static final Long ModemResetbyDTE = new Long(32L);
    public static final Long ModemRingNoAnswer = new Long(33L);
    public static final Long DTERingNoAnswer = new Long(34L);
    public static final Long PktBusSessionActive = new Long(35L);
    public static final Long PktBusSessionCongestion = new Long(36L);
    public static final Long PktBusSessionLost = new Long(37L);
    public static final Long PktBusSessionInactive = new Long(38L);
    public static final Long UserInterfaceReset = new Long(39L);
    public static final Long GatewayPortOutofService = new Long(40L);
    public static final Long GatewayPortLinkActive = new Long(41L);
    public static final Long DialOutLoginFailure = new Long(42L);
    public static final Long DialInLoginFailure = new Long(43L);
    public static final Long DialOutRestrictedNumber = new Long(44L);
    public static final Long DialBackRestrictedNumber = new Long(45L);
    public static final Long UserBlacklisted = new Long(46L);
    public static final Long AttemptedLoginBlacklisted = new Long(47L);
    public static final Long ResponseAttemptLimitExceeded = new Long(48L);
    public static final Long LoginAttemptLimitExceeded = new Long(49L);
    public static final Long DialOutCallDuration = new Long(50L);
    public static final Long DialInCallDuration = new Long(51L);
    public static final Long PktBusSessionErrStatus = new Long(52L);
    public static final Long NMCAutoRespnseTrap = new Long(53L);
    public static final Long AcctServerContactLoss = new Long(54L);
    public static final Long YellowAlarmClear = new Long(55L);
    public static final Long RedAlarmClear = new Long(56L);
    public static final Long LossOfSignalClear = new Long(57L);
    public static final Long RcvAlrmIndSignalClear = new Long(58L);
    public static final Long IncomingConnectionEstablished = new Long(59L);
    public static final Long OutgoingConnectionEstablished = new Long(60L);
    public static final Long IncomingConnectionTerminated = new Long(61L);
    public static final Long OutgoingConnectionTerminated = new Long(62L);
    public static final Long ConnectionAttemptFailure = new Long(63L);
    public static final Long ContinuousCRCAlarm = new Long(64L);
    public static final Long ContinuousCRCAlarmClear = new Long(65L);
    public static final Long PhysicalStateChange = new Long(66L);
    public static final Long GatewayNetworkFailed = new Long(71L);
    public static final Long GatewayNetworkRestored = new Long(72L);
    public static final Long PacketBusClockLost = new Long(73L);
    public static final Long PacketBusClockRestored = new Long(74L);
    public static final Long DChannelInService = new Long(75L);
    public static final Long DChannelOutofService = new Long(76L);
    public static final Long DS0sInService = new Long(77L);
    public static final Long DS0sOutofService = new Long(78L);
    public static final Long T1T1PRIE1PRICallEvent = new Long(79L);
    public static final Long PsuIncompatible = new Long(80L);
    public static final Long T1T1E1PRICallArriveEvent = new Long(81L);
    public static final Long T1T1E1PRICallConnectEvent = new Long(82L);
    public static final Long T1T1E1PRICallTerminaEvent = new Long(83L);
    public static final Long T1T1E1PRICallFailedEvent = new Long(84L);
    public static final Long DNSContactLost = new Long(85L);
    public static final Long NTPContactLost = new Long(86L);
    public static final Long NTPContactRestored = new Long(87L);
    public static final Long IPGWLinkUp = new Long(88L);
    public static final Long IPGWLinkDown = new Long(89L);
    public static final Long NTPContactDegraded = new Long(90L);
    public static final Long InConnectionFailed = new Long(91L);
    public static final Long OutConnectionFailed = new Long(92L);
    public static final Long ApplicationProcessorReset = new Long(93L);
    public static final Long DSPReset = new Long(94L);
    public static final Long ChangedtoMaintSrvsState = new Long(95L);
    public static final Long LoopBackclearedonchannel = new Long(96L);
    public static final Long LoopBackonchannel = new Long(97L);
    public static final Long TelcoAbnormalResponse = new Long(98L);
    public static final Long DNSContactRestored = new Long(99L);
    public static final Long DNSContactDegraded = new Long(100L);
    public static final Long RADIUSAccountingRestored = new Long(101L);
    public static final Long RADIUSAccountingGroupRestore = new Long(102L);
    public static final Long RADIUSAccountingGroupDegrade = new Long(103L);
    public static final Long RADIUSAccountingGroupNonOper = new Long(104L);
    public static final Long T1T1E1PRIInCallFailEvent = new Long(119L);
    public static final Long T1T1E1PRIOutCallFailEvent = new Long(120L);
    public static final Long RMMIERetrainEvent = new Long(121L);
    public static final Long RMMIESpeedShiftEvent = new Long(122L);
    public static final Long CDMACallStart = new Long(191L);
    public static final Long CDMACallEnd = new Long(192L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(24L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L),new Long(33L),new Long(34L),new Long(35L),new Long(36L),new Long(37L),new Long(38L),new Long(39L),new Long(40L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(46L),new Long(47L),new Long(48L),new Long(49L),new Long(50L),new Long(51L),new Long(52L),new Long(53L),new Long(54L),new Long(55L),new Long(56L),new Long(57L),new Long(58L),new Long(59L),new Long(60L),new Long(61L),new Long(62L),new Long(63L),new Long(64L),new Long(65L),new Long(66L),new Long(71L),new Long(72L),new Long(73L),new Long(74L),new Long(75L),new Long(76L),new Long(77L),new Long(78L),new Long(79L),new Long(80L),new Long(81L),new Long(82L),new Long(83L),new Long(84L),new Long(85L),new Long(86L),new Long(87L),new Long(88L),new Long(89L),new Long(90L),new Long(91L),new Long(92L),new Long(93L),new Long(94L),new Long(95L),new Long(96L),new Long(97L),new Long(98L),new Long(99L),new Long(100L),new Long(101L),new Long(102L),new Long(103L),new Long(104L),new Long(119L),new Long(120L),new Long(121L),new Long(122L),new Long(191L),new Long(192L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Module-Inserted".equals(name)) return new Long(6L);
            if ("Module-Removed".equals(name)) return new Long(7L);
            if ("PSU-Voltage-Alarm".equals(name)) return new Long(8L);
            if ("PSU-Failed".equals(name)) return new Long(9L);
            if ("HUB-Temp-Out-of-Range".equals(name)) return new Long(10L);
            if ("Fan-Failed".equals(name)) return new Long(11L);
            if ("Watchdog-Timeout".equals(name)) return new Long(12L);
            if ("Mgmt-Bus-Failure".equals(name)) return new Long(13L);
            if ("In-Connection-Est".equals(name)) return new Long(14L);
            if ("Out-Connection-Est".equals(name)) return new Long(15L);
            if ("In-Connection-Term".equals(name)) return new Long(16L);
            if ("Out-Connection-Term".equals(name)) return new Long(17L);
            if ("Connection-Failed".equals(name)) return new Long(18L);
            if ("Connection-Timeout".equals(name)) return new Long(19L);
            if ("DTE-Transmit-Idle".equals(name)) return new Long(20L);
            if ("DTR-True".equals(name)) return new Long(21L);
            if ("DTR-False".equals(name)) return new Long(22L);
            if ("Block-Error-at-Threshold".equals(name)) return new Long(23L);
            if ("Fallbacks-at-Threshold".equals(name)) return new Long(24L);
            if ("No-Dial-Tone-Detected".equals(name)) return new Long(25L);
            if ("No-Loop-Current-Detected".equals(name)) return new Long(26L);
            if ("Yellow-Alarm".equals(name)) return new Long(27L);
            if ("Red-Alarm".equals(name)) return new Long(28L);
            if ("Loss-Of-Signal".equals(name)) return new Long(29L);
            if ("Rcv-Alrm-Ind-Signal".equals(name)) return new Long(30L);
            if ("Timing-Source-Switch".equals(name)) return new Long(31L);
            if ("Modem-Reset-by-DTE".equals(name)) return new Long(32L);
            if ("Modem-Ring-No-Answer".equals(name)) return new Long(33L);
            if ("DTE-Ring-No-Answer".equals(name)) return new Long(34L);
            if ("Pkt-Bus-Session-Active".equals(name)) return new Long(35L);
            if ("Pkt-Bus-Session-Congestion".equals(name)) return new Long(36L);
            if ("Pkt-Bus-Session-Lost".equals(name)) return new Long(37L);
            if ("Pkt-Bus-Session-Inactive".equals(name)) return new Long(38L);
            if ("User-Interface-Reset".equals(name)) return new Long(39L);
            if ("Gateway-Port-Out-of-Service".equals(name)) return new Long(40L);
            if ("Gateway-Port-Link-Active".equals(name)) return new Long(41L);
            if ("Dial-Out-Login-Failure".equals(name)) return new Long(42L);
            if ("Dial-In-Login-Failure".equals(name)) return new Long(43L);
            if ("Dial-Out-Restricted-Number".equals(name)) return new Long(44L);
            if ("Dial-Back-Restricted-Number".equals(name)) return new Long(45L);
            if ("User-Blacklisted".equals(name)) return new Long(46L);
            if ("Attempted-Login-Blacklisted".equals(name)) return new Long(47L);
            if ("Response-Attempt-Limit-Exceeded".equals(name)) return new Long(48L);
            if ("Login-Attempt-Limit-Exceeded".equals(name)) return new Long(49L);
            if ("Dial-Out-Call-Duration".equals(name)) return new Long(50L);
            if ("Dial-In-Call-Duration".equals(name)) return new Long(51L);
            if ("Pkt-Bus-Session-Err-Status".equals(name)) return new Long(52L);
            if ("NMC-AutoRespnse-Trap".equals(name)) return new Long(53L);
            if ("Acct-Server-Contact-Loss".equals(name)) return new Long(54L);
            if ("Yellow-Alarm-Clear".equals(name)) return new Long(55L);
            if ("Red-Alarm-Clear".equals(name)) return new Long(56L);
            if ("Loss-Of-Signal-Clear".equals(name)) return new Long(57L);
            if ("Rcv-Alrm-Ind-Signal-Clear".equals(name)) return new Long(58L);
            if ("Incoming-Connection-Established".equals(name)) return new Long(59L);
            if ("Outgoing-Connection-Established".equals(name)) return new Long(60L);
            if ("Incoming-Connection-Terminated".equals(name)) return new Long(61L);
            if ("Outgoing-Connection-Terminated".equals(name)) return new Long(62L);
            if ("Connection-Attempt-Failure".equals(name)) return new Long(63L);
            if ("Continuous-CRC-Alarm".equals(name)) return new Long(64L);
            if ("Continuous-CRC-Alarm-Clear".equals(name)) return new Long(65L);
            if ("Physical-State-Change".equals(name)) return new Long(66L);
            if ("Gateway-Network-Failed".equals(name)) return new Long(71L);
            if ("Gateway-Network-Restored".equals(name)) return new Long(72L);
            if ("Packet-Bus-Clock-Lost".equals(name)) return new Long(73L);
            if ("Packet-Bus-Clock-Restored".equals(name)) return new Long(74L);
            if ("D-Channel-In-Service".equals(name)) return new Long(75L);
            if ("D-Channel-Out-of-Service".equals(name)) return new Long(76L);
            if ("DS0s-In-Service".equals(name)) return new Long(77L);
            if ("DS0s-Out-of-Service".equals(name)) return new Long(78L);
            if ("T1/T1PRI/E1PRI-Call-Event".equals(name)) return new Long(79L);
            if ("Psu-Incompatible".equals(name)) return new Long(80L);
            if ("T1,T1-E1/PRI-Call-Arrive-Event".equals(name)) return new Long(81L);
            if ("T1,T1-E1/PRI-Call-Connect-Event".equals(name)) return new Long(82L);
            if ("T1,T1-E1/PRI-Call-Termina-Event".equals(name)) return new Long(83L);
            if ("T1,T1-E1/PRI-Call-Failed-Event".equals(name)) return new Long(84L);
            if ("DNS-Contact-Lost".equals(name)) return new Long(85L);
            if ("NTP-Contact-Lost".equals(name)) return new Long(86L);
            if ("NTP-Contact-Restored".equals(name)) return new Long(87L);
            if ("IPGW-Link-Up".equals(name)) return new Long(88L);
            if ("IPGW-Link-Down".equals(name)) return new Long(89L);
            if ("NTP-Contact-Degraded".equals(name)) return new Long(90L);
            if ("In-Connection-Failed".equals(name)) return new Long(91L);
            if ("Out-Connection-Failed".equals(name)) return new Long(92L);
            if ("Application-ProcessorReset".equals(name)) return new Long(93L);
            if ("DSP-Reset".equals(name)) return new Long(94L);
            if ("Changed-to-Maint-Srvs-State".equals(name)) return new Long(95L);
            if ("Loop-Back-cleared-on-channel".equals(name)) return new Long(96L);
            if ("Loop-Back-on-channel".equals(name)) return new Long(97L);
            if ("Telco-Abnormal-Response".equals(name)) return new Long(98L);
            if ("DNS-Contact-Restored".equals(name)) return new Long(99L);
            if ("DNS-Contact-Degraded".equals(name)) return new Long(100L);
            if ("RADIUS-Accounting-Restored".equals(name)) return new Long(101L);
            if ("RADIUS-Accounting-Group-Restore".equals(name)) return new Long(102L);
            if ("RADIUS-Accounting-Group-Degrade".equals(name)) return new Long(103L);
            if ("RADIUS-Accounting-Group-NonOper".equals(name)) return new Long(104L);
            if ("T1/T1-E1/PRI-InCall-Fail-Event".equals(name)) return new Long(119L);
            if ("T1/T1-E1/PRI-OutCall-Fail-Event".equals(name)) return new Long(120L);
            if ("RMMIE-Retrain-Event".equals(name)) return new Long(121L);
            if ("RMMIE-Speed-Shift-Event".equals(name)) return new Long(122L);
            if ("CDMA-Call-Start".equals(name)) return new Long(191L);
            if ("CDMA-Call-End".equals(name)) return new Long(192L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(6L).equals(value)) return "Module-Inserted";
            if (new Long(7L).equals(value)) return "Module-Removed";
            if (new Long(8L).equals(value)) return "PSU-Voltage-Alarm";
            if (new Long(9L).equals(value)) return "PSU-Failed";
            if (new Long(10L).equals(value)) return "HUB-Temp-Out-of-Range";
            if (new Long(11L).equals(value)) return "Fan-Failed";
            if (new Long(12L).equals(value)) return "Watchdog-Timeout";
            if (new Long(13L).equals(value)) return "Mgmt-Bus-Failure";
            if (new Long(14L).equals(value)) return "In-Connection-Est";
            if (new Long(15L).equals(value)) return "Out-Connection-Est";
            if (new Long(16L).equals(value)) return "In-Connection-Term";
            if (new Long(17L).equals(value)) return "Out-Connection-Term";
            if (new Long(18L).equals(value)) return "Connection-Failed";
            if (new Long(19L).equals(value)) return "Connection-Timeout";
            if (new Long(20L).equals(value)) return "DTE-Transmit-Idle";
            if (new Long(21L).equals(value)) return "DTR-True";
            if (new Long(22L).equals(value)) return "DTR-False";
            if (new Long(23L).equals(value)) return "Block-Error-at-Threshold";
            if (new Long(24L).equals(value)) return "Fallbacks-at-Threshold";
            if (new Long(25L).equals(value)) return "No-Dial-Tone-Detected";
            if (new Long(26L).equals(value)) return "No-Loop-Current-Detected";
            if (new Long(27L).equals(value)) return "Yellow-Alarm";
            if (new Long(28L).equals(value)) return "Red-Alarm";
            if (new Long(29L).equals(value)) return "Loss-Of-Signal";
            if (new Long(30L).equals(value)) return "Rcv-Alrm-Ind-Signal";
            if (new Long(31L).equals(value)) return "Timing-Source-Switch";
            if (new Long(32L).equals(value)) return "Modem-Reset-by-DTE";
            if (new Long(33L).equals(value)) return "Modem-Ring-No-Answer";
            if (new Long(34L).equals(value)) return "DTE-Ring-No-Answer";
            if (new Long(35L).equals(value)) return "Pkt-Bus-Session-Active";
            if (new Long(36L).equals(value)) return "Pkt-Bus-Session-Congestion";
            if (new Long(37L).equals(value)) return "Pkt-Bus-Session-Lost";
            if (new Long(38L).equals(value)) return "Pkt-Bus-Session-Inactive";
            if (new Long(39L).equals(value)) return "User-Interface-Reset";
            if (new Long(40L).equals(value)) return "Gateway-Port-Out-of-Service";
            if (new Long(41L).equals(value)) return "Gateway-Port-Link-Active";
            if (new Long(42L).equals(value)) return "Dial-Out-Login-Failure";
            if (new Long(43L).equals(value)) return "Dial-In-Login-Failure";
            if (new Long(44L).equals(value)) return "Dial-Out-Restricted-Number";
            if (new Long(45L).equals(value)) return "Dial-Back-Restricted-Number";
            if (new Long(46L).equals(value)) return "User-Blacklisted";
            if (new Long(47L).equals(value)) return "Attempted-Login-Blacklisted";
            if (new Long(48L).equals(value)) return "Response-Attempt-Limit-Exceeded";
            if (new Long(49L).equals(value)) return "Login-Attempt-Limit-Exceeded";
            if (new Long(50L).equals(value)) return "Dial-Out-Call-Duration";
            if (new Long(51L).equals(value)) return "Dial-In-Call-Duration";
            if (new Long(52L).equals(value)) return "Pkt-Bus-Session-Err-Status";
            if (new Long(53L).equals(value)) return "NMC-AutoRespnse-Trap";
            if (new Long(54L).equals(value)) return "Acct-Server-Contact-Loss";
            if (new Long(55L).equals(value)) return "Yellow-Alarm-Clear";
            if (new Long(56L).equals(value)) return "Red-Alarm-Clear";
            if (new Long(57L).equals(value)) return "Loss-Of-Signal-Clear";
            if (new Long(58L).equals(value)) return "Rcv-Alrm-Ind-Signal-Clear";
            if (new Long(59L).equals(value)) return "Incoming-Connection-Established";
            if (new Long(60L).equals(value)) return "Outgoing-Connection-Established";
            if (new Long(61L).equals(value)) return "Incoming-Connection-Terminated";
            if (new Long(62L).equals(value)) return "Outgoing-Connection-Terminated";
            if (new Long(63L).equals(value)) return "Connection-Attempt-Failure";
            if (new Long(64L).equals(value)) return "Continuous-CRC-Alarm";
            if (new Long(65L).equals(value)) return "Continuous-CRC-Alarm-Clear";
            if (new Long(66L).equals(value)) return "Physical-State-Change";
            if (new Long(71L).equals(value)) return "Gateway-Network-Failed";
            if (new Long(72L).equals(value)) return "Gateway-Network-Restored";
            if (new Long(73L).equals(value)) return "Packet-Bus-Clock-Lost";
            if (new Long(74L).equals(value)) return "Packet-Bus-Clock-Restored";
            if (new Long(75L).equals(value)) return "D-Channel-In-Service";
            if (new Long(76L).equals(value)) return "D-Channel-Out-of-Service";
            if (new Long(77L).equals(value)) return "DS0s-In-Service";
            if (new Long(78L).equals(value)) return "DS0s-Out-of-Service";
            if (new Long(79L).equals(value)) return "T1/T1PRI/E1PRI-Call-Event";
            if (new Long(80L).equals(value)) return "Psu-Incompatible";
            if (new Long(81L).equals(value)) return "T1,T1-E1/PRI-Call-Arrive-Event";
            if (new Long(82L).equals(value)) return "T1,T1-E1/PRI-Call-Connect-Event";
            if (new Long(83L).equals(value)) return "T1,T1-E1/PRI-Call-Termina-Event";
            if (new Long(84L).equals(value)) return "T1,T1-E1/PRI-Call-Failed-Event";
            if (new Long(85L).equals(value)) return "DNS-Contact-Lost";
            if (new Long(86L).equals(value)) return "NTP-Contact-Lost";
            if (new Long(87L).equals(value)) return "NTP-Contact-Restored";
            if (new Long(88L).equals(value)) return "IPGW-Link-Up";
            if (new Long(89L).equals(value)) return "IPGW-Link-Down";
            if (new Long(90L).equals(value)) return "NTP-Contact-Degraded";
            if (new Long(91L).equals(value)) return "In-Connection-Failed";
            if (new Long(92L).equals(value)) return "Out-Connection-Failed";
            if (new Long(93L).equals(value)) return "Application-ProcessorReset";
            if (new Long(94L).equals(value)) return "DSP-Reset";
            if (new Long(95L).equals(value)) return "Changed-to-Maint-Srvs-State";
            if (new Long(96L).equals(value)) return "Loop-Back-cleared-on-channel";
            if (new Long(97L).equals(value)) return "Loop-Back-on-channel";
            if (new Long(98L).equals(value)) return "Telco-Abnormal-Response";
            if (new Long(99L).equals(value)) return "DNS-Contact-Restored";
            if (new Long(100L).equals(value)) return "DNS-Contact-Degraded";
            if (new Long(101L).equals(value)) return "RADIUS-Accounting-Restored";
            if (new Long(102L).equals(value)) return "RADIUS-Accounting-Group-Restore";
            if (new Long(103L).equals(value)) return "RADIUS-Accounting-Group-Degrade";
            if (new Long(104L).equals(value)) return "RADIUS-Accounting-Group-NonOper";
            if (new Long(119L).equals(value)) return "T1/T1-E1/PRI-InCall-Fail-Event";
            if (new Long(120L).equals(value)) return "T1/T1-E1/PRI-OutCall-Fail-Event";
            if (new Long(121L).equals(value)) return "RMMIE-Retrain-Event";
            if (new Long(122L).equals(value)) return "RMMIE-Speed-Shift-Event";
            if (new Long(191L).equals(value)) return "CDMA-Call-Start";
            if (new Long(192L).equals(value)) return "CDMA-Call-End";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USREventId()
    {
        setup();
    }

    public Attr_USREventId(Serializable o)
    {
        setup(o);
    }
}
