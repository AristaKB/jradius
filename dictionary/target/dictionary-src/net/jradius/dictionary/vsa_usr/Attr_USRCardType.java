// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-Card-Type<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0xBE85<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> SlotEmpty (1)
 * <li> SlotUnknown (2)
 * <li> NetwMgtCard (3)
 * <li> DualT1NAC (4)
 * <li> DualModemNAC (5)
 * <li> QuadModemNAC (6)
 * <li> TrGatewayNAC (7)
 * <li> X25GatewayNAC (8)
 * <li> DualV34ModemNAC (9)
 * <li> QuadV32DigitalModemNAC (10)
 * <li> QuadV32AnalogModemNAC (11)
 * <li> QuadV32DigAnlModemNAC (12)
 * <li> QuadV34DigModemNAC (13)
 * <li> QuadV34AnlModemNAC (14)
 * <li> QuadV34DigAnlModemNAC (15)
 * <li> SingleT1NAC (16)
 * <li> EthernetGatewayNAC (17)
 * <li> AccessServer (18)
 * <li> 486TrGatewayNAC (19)
 * <li> 486EthernetGatewayNAC (20)
 * <li> DualRS232NAC (22)
 * <li> 486X25GatewayNAC (23)
 * <li> ApplicationServerNAC (25)
 * <li> ISDNGatewayNAC (26)
 * <li> ISDNpriT1NAC (27)
 * <li> ClkedNetMgtCard (28)
 * <li> ModemPoolManagementNAC (29)
 * <li> ModemPoolNetserverNAC (30)
 * <li> ModemPoolV34ModemNAC (31)
 * <li> ModemPoolISDNNAC (32)
 * <li> NTServerNAC (33)
 * <li> QuadV34DigitalG2NAC (34)
 * <li> QuadV34AnalogG2NAC (35)
 * <li> QuadV34DigAnlgG2NAC (36)
 * <li> NETServerFrameRelayNAC (37)
 * <li> NETServerTokenRingNAC (38)
 * <li> X2524ChannelNAC (39)
 * <li> WirelessGatewayNac (42)
 * <li> EnhancedAccessServer (44)
 * <li> EnhancedISDNGatewayNAC (45)
 * <li> DualT1NIC (1001)
 * <li> DualAlogMdmNIC (1002)
 * <li> QuadDgtlMdmNIC (1003)
 * <li> QuadAlogDgtlMdmNIC (1004)
 * <li> TokenRingNIC (1005)
 * <li> SingleT1NIC (1006)
 * <li> EthernetNIC (1007)
 * <li> ShortHaulDualT1NIC (1008)
 * <li> DualAlogMgdIntlMdmNIC (1009)
 * <li> X25NIC (1010)
 * <li> QuadAlogNonMgdMdmNIC (1011)
 * <li> QuadAlogMgdIntlMdmNIC (1012)
 * <li> QuadAlogNonMgdIntlMdmNIC (1013)
 * <li> QuadLsdLiMgdMdmNIC (1014)
 * <li> QuadLsdLiNonMgdMdmNIC (1015)
 * <li> QuadLsdLiMgdIntlMdmNIC (1016)
 * <li> QuadLsdLiNonMgdIntlMdmNIC (1017)
 * <li> HSEthernetWithV35NIC (1018)
 * <li> HSEthernetWithoutV35NIC (1019)
 * <li> DualHighSpeedV35NIC (1020)
 * <li> QuadV35RS232LowSpeedNIC (1021)
 * <li> DualE1NIC (1022)
 * <li> ShortHaulDualE1NIC (1023)
 * <li> BellcoreLongHaulDualT1NIC (1025)
 * <li> BellcoreShrtHaulDualT1NIC (1026)
 * <li> SCSIEdgeServerNIC (1027)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRCardType extends VSAttribute
{
    public static final String NAME = "USR-Card-Type";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0xBE85;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long SlotEmpty = new Long(1L);
    public static final Long SlotUnknown = new Long(2L);
    public static final Long NetwMgtCard = new Long(3L);
    public static final Long DualT1NAC = new Long(4L);
    public static final Long DualModemNAC = new Long(5L);
    public static final Long QuadModemNAC = new Long(6L);
    public static final Long TrGatewayNAC = new Long(7L);
    public static final Long X25GatewayNAC = new Long(8L);
    public static final Long DualV34ModemNAC = new Long(9L);
    public static final Long QuadV32DigitalModemNAC = new Long(10L);
    public static final Long QuadV32AnalogModemNAC = new Long(11L);
    public static final Long QuadV32DigAnlModemNAC = new Long(12L);
    public static final Long QuadV34DigModemNAC = new Long(13L);
    public static final Long QuadV34AnlModemNAC = new Long(14L);
    public static final Long QuadV34DigAnlModemNAC = new Long(15L);
    public static final Long SingleT1NAC = new Long(16L);
    public static final Long EthernetGatewayNAC = new Long(17L);
    public static final Long AccessServer = new Long(18L);
    public static final Long _486TrGatewayNAC = new Long(19L);
    public static final Long _486EthernetGatewayNAC = new Long(20L);
    public static final Long DualRS232NAC = new Long(22L);
    public static final Long _486X25GatewayNAC = new Long(23L);
    public static final Long ApplicationServerNAC = new Long(25L);
    public static final Long ISDNGatewayNAC = new Long(26L);
    public static final Long ISDNpriT1NAC = new Long(27L);
    public static final Long ClkedNetMgtCard = new Long(28L);
    public static final Long ModemPoolManagementNAC = new Long(29L);
    public static final Long ModemPoolNetserverNAC = new Long(30L);
    public static final Long ModemPoolV34ModemNAC = new Long(31L);
    public static final Long ModemPoolISDNNAC = new Long(32L);
    public static final Long NTServerNAC = new Long(33L);
    public static final Long QuadV34DigitalG2NAC = new Long(34L);
    public static final Long QuadV34AnalogG2NAC = new Long(35L);
    public static final Long QuadV34DigAnlgG2NAC = new Long(36L);
    public static final Long NETServerFrameRelayNAC = new Long(37L);
    public static final Long NETServerTokenRingNAC = new Long(38L);
    public static final Long X2524ChannelNAC = new Long(39L);
    public static final Long WirelessGatewayNac = new Long(42L);
    public static final Long EnhancedAccessServer = new Long(44L);
    public static final Long EnhancedISDNGatewayNAC = new Long(45L);
    public static final Long DualT1NIC = new Long(1001L);
    public static final Long DualAlogMdmNIC = new Long(1002L);
    public static final Long QuadDgtlMdmNIC = new Long(1003L);
    public static final Long QuadAlogDgtlMdmNIC = new Long(1004L);
    public static final Long TokenRingNIC = new Long(1005L);
    public static final Long SingleT1NIC = new Long(1006L);
    public static final Long EthernetNIC = new Long(1007L);
    public static final Long ShortHaulDualT1NIC = new Long(1008L);
    public static final Long DualAlogMgdIntlMdmNIC = new Long(1009L);
    public static final Long X25NIC = new Long(1010L);
    public static final Long QuadAlogNonMgdMdmNIC = new Long(1011L);
    public static final Long QuadAlogMgdIntlMdmNIC = new Long(1012L);
    public static final Long QuadAlogNonMgdIntlMdmNIC = new Long(1013L);
    public static final Long QuadLsdLiMgdMdmNIC = new Long(1014L);
    public static final Long QuadLsdLiNonMgdMdmNIC = new Long(1015L);
    public static final Long QuadLsdLiMgdIntlMdmNIC = new Long(1016L);
    public static final Long QuadLsdLiNonMgdIntlMdmNIC = new Long(1017L);
    public static final Long HSEthernetWithV35NIC = new Long(1018L);
    public static final Long HSEthernetWithoutV35NIC = new Long(1019L);
    public static final Long DualHighSpeedV35NIC = new Long(1020L);
    public static final Long QuadV35RS232LowSpeedNIC = new Long(1021L);
    public static final Long DualE1NIC = new Long(1022L);
    public static final Long ShortHaulDualE1NIC = new Long(1023L);
    public static final Long BellcoreLongHaulDualT1NIC = new Long(1025L);
    public static final Long BellcoreShrtHaulDualT1NIC = new Long(1026L);
    public static final Long SCSIEdgeServerNIC = new Long(1027L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(22L),new Long(23L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(32L),new Long(33L),new Long(34L),new Long(35L),new Long(36L),new Long(37L),new Long(38L),new Long(39L),new Long(42L),new Long(44L),new Long(45L),new Long(1001L),new Long(1002L),new Long(1003L),new Long(1004L),new Long(1005L),new Long(1006L),new Long(1007L),new Long(1008L),new Long(1009L),new Long(1010L),new Long(1011L),new Long(1012L),new Long(1013L),new Long(1014L),new Long(1015L),new Long(1016L),new Long(1017L),new Long(1018L),new Long(1019L),new Long(1020L),new Long(1021L),new Long(1022L),new Long(1023L),new Long(1025L),new Long(1026L),new Long(1027L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("SlotEmpty".equals(name)) return new Long(1L);
            if ("SlotUnknown".equals(name)) return new Long(2L);
            if ("NetwMgtCard".equals(name)) return new Long(3L);
            if ("DualT1NAC".equals(name)) return new Long(4L);
            if ("DualModemNAC".equals(name)) return new Long(5L);
            if ("QuadModemNAC".equals(name)) return new Long(6L);
            if ("TrGatewayNAC".equals(name)) return new Long(7L);
            if ("X25GatewayNAC".equals(name)) return new Long(8L);
            if ("DualV34ModemNAC".equals(name)) return new Long(9L);
            if ("QuadV32DigitalModemNAC".equals(name)) return new Long(10L);
            if ("QuadV32AnalogModemNAC".equals(name)) return new Long(11L);
            if ("QuadV32DigAnlModemNAC".equals(name)) return new Long(12L);
            if ("QuadV34DigModemNAC".equals(name)) return new Long(13L);
            if ("QuadV34AnlModemNAC".equals(name)) return new Long(14L);
            if ("QuadV34DigAnlModemNAC".equals(name)) return new Long(15L);
            if ("SingleT1NAC".equals(name)) return new Long(16L);
            if ("EthernetGatewayNAC".equals(name)) return new Long(17L);
            if ("AccessServer".equals(name)) return new Long(18L);
            if ("486TrGatewayNAC".equals(name)) return new Long(19L);
            if ("486EthernetGatewayNAC".equals(name)) return new Long(20L);
            if ("DualRS232NAC".equals(name)) return new Long(22L);
            if ("486X25GatewayNAC".equals(name)) return new Long(23L);
            if ("ApplicationServerNAC".equals(name)) return new Long(25L);
            if ("ISDNGatewayNAC".equals(name)) return new Long(26L);
            if ("ISDNpriT1NAC".equals(name)) return new Long(27L);
            if ("ClkedNetMgtCard".equals(name)) return new Long(28L);
            if ("ModemPoolManagementNAC".equals(name)) return new Long(29L);
            if ("ModemPoolNetserverNAC".equals(name)) return new Long(30L);
            if ("ModemPoolV34ModemNAC".equals(name)) return new Long(31L);
            if ("ModemPoolISDNNAC".equals(name)) return new Long(32L);
            if ("NTServerNAC".equals(name)) return new Long(33L);
            if ("QuadV34DigitalG2NAC".equals(name)) return new Long(34L);
            if ("QuadV34AnalogG2NAC".equals(name)) return new Long(35L);
            if ("QuadV34DigAnlgG2NAC".equals(name)) return new Long(36L);
            if ("NETServerFrameRelayNAC".equals(name)) return new Long(37L);
            if ("NETServerTokenRingNAC".equals(name)) return new Long(38L);
            if ("X2524ChannelNAC".equals(name)) return new Long(39L);
            if ("WirelessGatewayNac".equals(name)) return new Long(42L);
            if ("EnhancedAccessServer".equals(name)) return new Long(44L);
            if ("EnhancedISDNGatewayNAC".equals(name)) return new Long(45L);
            if ("DualT1NIC".equals(name)) return new Long(1001L);
            if ("DualAlogMdmNIC".equals(name)) return new Long(1002L);
            if ("QuadDgtlMdmNIC".equals(name)) return new Long(1003L);
            if ("QuadAlogDgtlMdmNIC".equals(name)) return new Long(1004L);
            if ("TokenRingNIC".equals(name)) return new Long(1005L);
            if ("SingleT1NIC".equals(name)) return new Long(1006L);
            if ("EthernetNIC".equals(name)) return new Long(1007L);
            if ("ShortHaulDualT1NIC".equals(name)) return new Long(1008L);
            if ("DualAlogMgdIntlMdmNIC".equals(name)) return new Long(1009L);
            if ("X25NIC".equals(name)) return new Long(1010L);
            if ("QuadAlogNonMgdMdmNIC".equals(name)) return new Long(1011L);
            if ("QuadAlogMgdIntlMdmNIC".equals(name)) return new Long(1012L);
            if ("QuadAlogNonMgdIntlMdmNIC".equals(name)) return new Long(1013L);
            if ("QuadLsdLiMgdMdmNIC".equals(name)) return new Long(1014L);
            if ("QuadLsdLiNonMgdMdmNIC".equals(name)) return new Long(1015L);
            if ("QuadLsdLiMgdIntlMdmNIC".equals(name)) return new Long(1016L);
            if ("QuadLsdLiNonMgdIntlMdmNIC".equals(name)) return new Long(1017L);
            if ("HSEthernetWithV35NIC".equals(name)) return new Long(1018L);
            if ("HSEthernetWithoutV35NIC".equals(name)) return new Long(1019L);
            if ("DualHighSpeedV35NIC".equals(name)) return new Long(1020L);
            if ("QuadV35RS232LowSpeedNIC".equals(name)) return new Long(1021L);
            if ("DualE1NIC".equals(name)) return new Long(1022L);
            if ("ShortHaulDualE1NIC".equals(name)) return new Long(1023L);
            if ("BellcoreLongHaulDualT1NIC".equals(name)) return new Long(1025L);
            if ("BellcoreShrtHaulDualT1NIC".equals(name)) return new Long(1026L);
            if ("SCSIEdgeServerNIC".equals(name)) return new Long(1027L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "SlotEmpty";
            if (new Long(2L).equals(value)) return "SlotUnknown";
            if (new Long(3L).equals(value)) return "NetwMgtCard";
            if (new Long(4L).equals(value)) return "DualT1NAC";
            if (new Long(5L).equals(value)) return "DualModemNAC";
            if (new Long(6L).equals(value)) return "QuadModemNAC";
            if (new Long(7L).equals(value)) return "TrGatewayNAC";
            if (new Long(8L).equals(value)) return "X25GatewayNAC";
            if (new Long(9L).equals(value)) return "DualV34ModemNAC";
            if (new Long(10L).equals(value)) return "QuadV32DigitalModemNAC";
            if (new Long(11L).equals(value)) return "QuadV32AnalogModemNAC";
            if (new Long(12L).equals(value)) return "QuadV32DigAnlModemNAC";
            if (new Long(13L).equals(value)) return "QuadV34DigModemNAC";
            if (new Long(14L).equals(value)) return "QuadV34AnlModemNAC";
            if (new Long(15L).equals(value)) return "QuadV34DigAnlModemNAC";
            if (new Long(16L).equals(value)) return "SingleT1NAC";
            if (new Long(17L).equals(value)) return "EthernetGatewayNAC";
            if (new Long(18L).equals(value)) return "AccessServer";
            if (new Long(19L).equals(value)) return "486TrGatewayNAC";
            if (new Long(20L).equals(value)) return "486EthernetGatewayNAC";
            if (new Long(22L).equals(value)) return "DualRS232NAC";
            if (new Long(23L).equals(value)) return "486X25GatewayNAC";
            if (new Long(25L).equals(value)) return "ApplicationServerNAC";
            if (new Long(26L).equals(value)) return "ISDNGatewayNAC";
            if (new Long(27L).equals(value)) return "ISDNpriT1NAC";
            if (new Long(28L).equals(value)) return "ClkedNetMgtCard";
            if (new Long(29L).equals(value)) return "ModemPoolManagementNAC";
            if (new Long(30L).equals(value)) return "ModemPoolNetserverNAC";
            if (new Long(31L).equals(value)) return "ModemPoolV34ModemNAC";
            if (new Long(32L).equals(value)) return "ModemPoolISDNNAC";
            if (new Long(33L).equals(value)) return "NTServerNAC";
            if (new Long(34L).equals(value)) return "QuadV34DigitalG2NAC";
            if (new Long(35L).equals(value)) return "QuadV34AnalogG2NAC";
            if (new Long(36L).equals(value)) return "QuadV34DigAnlgG2NAC";
            if (new Long(37L).equals(value)) return "NETServerFrameRelayNAC";
            if (new Long(38L).equals(value)) return "NETServerTokenRingNAC";
            if (new Long(39L).equals(value)) return "X2524ChannelNAC";
            if (new Long(42L).equals(value)) return "WirelessGatewayNac";
            if (new Long(44L).equals(value)) return "EnhancedAccessServer";
            if (new Long(45L).equals(value)) return "EnhancedISDNGatewayNAC";
            if (new Long(1001L).equals(value)) return "DualT1NIC";
            if (new Long(1002L).equals(value)) return "DualAlogMdmNIC";
            if (new Long(1003L).equals(value)) return "QuadDgtlMdmNIC";
            if (new Long(1004L).equals(value)) return "QuadAlogDgtlMdmNIC";
            if (new Long(1005L).equals(value)) return "TokenRingNIC";
            if (new Long(1006L).equals(value)) return "SingleT1NIC";
            if (new Long(1007L).equals(value)) return "EthernetNIC";
            if (new Long(1008L).equals(value)) return "ShortHaulDualT1NIC";
            if (new Long(1009L).equals(value)) return "DualAlogMgdIntlMdmNIC";
            if (new Long(1010L).equals(value)) return "X25NIC";
            if (new Long(1011L).equals(value)) return "QuadAlogNonMgdMdmNIC";
            if (new Long(1012L).equals(value)) return "QuadAlogMgdIntlMdmNIC";
            if (new Long(1013L).equals(value)) return "QuadAlogNonMgdIntlMdmNIC";
            if (new Long(1014L).equals(value)) return "QuadLsdLiMgdMdmNIC";
            if (new Long(1015L).equals(value)) return "QuadLsdLiNonMgdMdmNIC";
            if (new Long(1016L).equals(value)) return "QuadLsdLiMgdIntlMdmNIC";
            if (new Long(1017L).equals(value)) return "QuadLsdLiNonMgdIntlMdmNIC";
            if (new Long(1018L).equals(value)) return "HSEthernetWithV35NIC";
            if (new Long(1019L).equals(value)) return "HSEthernetWithoutV35NIC";
            if (new Long(1020L).equals(value)) return "DualHighSpeedV35NIC";
            if (new Long(1021L).equals(value)) return "QuadV35RS232LowSpeedNIC";
            if (new Long(1022L).equals(value)) return "DualE1NIC";
            if (new Long(1023L).equals(value)) return "ShortHaulDualE1NIC";
            if (new Long(1025L).equals(value)) return "BellcoreLongHaulDualT1NIC";
            if (new Long(1026L).equals(value)) return "BellcoreShrtHaulDualT1NIC";
            if (new Long(1027L).equals(value)) return "SCSIEdgeServerNIC";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRCardType()
    {
        setup();
    }

    public Attr_USRCardType(Serializable o)
    {
        setup(o);
    }
}
