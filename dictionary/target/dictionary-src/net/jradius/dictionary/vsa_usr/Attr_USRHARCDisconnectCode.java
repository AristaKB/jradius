// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_usr;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: USR-HARC-Disconnect-Code<br>
 * Attribute Type: 26<br>
 * Vendor Id: 429<br>
 * VSA Type: 0x988b<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> No-Error (0)
 * <li> No-Carrier (1)
 * <li> No-DSR (2)
 * <li> Timeout (3)
 * <li> Reset (4)
 * <li> Call-Drop-Req (5)
 * <li> Idle-Timeout (6)
 * <li> Session-Timeout (7)
 * <li> User-Req-Drop (8)
 * <li> Host-Req-Drop (9)
 * <li> Service-Interruption (10)
 * <li> Service-Unavailable (11)
 * <li> User-Input-Error (12)
 * <li> NAS-Drop-For-Callback (13)
 * <li> NAS-Drop-Misc-Non-Error (14)
 * <li> NAS-Internal-Error (15)
 * <li> Line-Busy (16)
 * <li> Tunnel-Term-Unreach (19)
 * <li> Tunnel-Refused (20)
 * <li> Tunnel-Auth-Failed (21)
 * <li> Tunnel-Session-Timeout (22)
 * <li> Tunnel-Timeout (23)
 * <li> Radius-Res-Reclaim (25)
 * <li> DNIS-Auth-Failed (26)
 * <li> PAP-Auth-Failure (27)
 * <li> CHAP-Auth-Failure (28)
 * <li> PPP-LCP-Failed (29)
 * <li> PPP-NCP-Failed (30)
 * <li> Radius-Timeout (31)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_USRHARCDisconnectCode extends VSAttribute
{
    public static final String NAME = "USR-HARC-Disconnect-Code";
    public static final int VENDOR_ID = 429;
    public static final int VSA_TYPE = 0x988b;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long NoError = new Long(0L);
    public static final Long NoCarrier = new Long(1L);
    public static final Long NoDSR = new Long(2L);
    public static final Long Timeout = new Long(3L);
    public static final Long Reset = new Long(4L);
    public static final Long CallDropReq = new Long(5L);
    public static final Long IdleTimeout = new Long(6L);
    public static final Long SessionTimeout = new Long(7L);
    public static final Long UserReqDrop = new Long(8L);
    public static final Long HostReqDrop = new Long(9L);
    public static final Long ServiceInterruption = new Long(10L);
    public static final Long ServiceUnavailable = new Long(11L);
    public static final Long UserInputError = new Long(12L);
    public static final Long NASDropForCallback = new Long(13L);
    public static final Long NASDropMiscNonError = new Long(14L);
    public static final Long NASInternalError = new Long(15L);
    public static final Long LineBusy = new Long(16L);
    public static final Long TunnelTermUnreach = new Long(19L);
    public static final Long TunnelRefused = new Long(20L);
    public static final Long TunnelAuthFailed = new Long(21L);
    public static final Long TunnelSessionTimeout = new Long(22L);
    public static final Long TunnelTimeout = new Long(23L);
    public static final Long RadiusResReclaim = new Long(25L);
    public static final Long DNISAuthFailed = new Long(26L);
    public static final Long PAPAuthFailure = new Long(27L);
    public static final Long CHAPAuthFailure = new Long(28L);
    public static final Long PPPLCPFailed = new Long(29L);
    public static final Long PPPNCPFailed = new Long(30L);
    public static final Long RadiusTimeout = new Long(31L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(25L),new Long(26L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("No-Error".equals(name)) return new Long(0L);
            if ("No-Carrier".equals(name)) return new Long(1L);
            if ("No-DSR".equals(name)) return new Long(2L);
            if ("Timeout".equals(name)) return new Long(3L);
            if ("Reset".equals(name)) return new Long(4L);
            if ("Call-Drop-Req".equals(name)) return new Long(5L);
            if ("Idle-Timeout".equals(name)) return new Long(6L);
            if ("Session-Timeout".equals(name)) return new Long(7L);
            if ("User-Req-Drop".equals(name)) return new Long(8L);
            if ("Host-Req-Drop".equals(name)) return new Long(9L);
            if ("Service-Interruption".equals(name)) return new Long(10L);
            if ("Service-Unavailable".equals(name)) return new Long(11L);
            if ("User-Input-Error".equals(name)) return new Long(12L);
            if ("NAS-Drop-For-Callback".equals(name)) return new Long(13L);
            if ("NAS-Drop-Misc-Non-Error".equals(name)) return new Long(14L);
            if ("NAS-Internal-Error".equals(name)) return new Long(15L);
            if ("Line-Busy".equals(name)) return new Long(16L);
            if ("Tunnel-Term-Unreach".equals(name)) return new Long(19L);
            if ("Tunnel-Refused".equals(name)) return new Long(20L);
            if ("Tunnel-Auth-Failed".equals(name)) return new Long(21L);
            if ("Tunnel-Session-Timeout".equals(name)) return new Long(22L);
            if ("Tunnel-Timeout".equals(name)) return new Long(23L);
            if ("Radius-Res-Reclaim".equals(name)) return new Long(25L);
            if ("DNIS-Auth-Failed".equals(name)) return new Long(26L);
            if ("PAP-Auth-Failure".equals(name)) return new Long(27L);
            if ("CHAP-Auth-Failure".equals(name)) return new Long(28L);
            if ("PPP-LCP-Failed".equals(name)) return new Long(29L);
            if ("PPP-NCP-Failed".equals(name)) return new Long(30L);
            if ("Radius-Timeout".equals(name)) return new Long(31L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "No-Error";
            if (new Long(1L).equals(value)) return "No-Carrier";
            if (new Long(2L).equals(value)) return "No-DSR";
            if (new Long(3L).equals(value)) return "Timeout";
            if (new Long(4L).equals(value)) return "Reset";
            if (new Long(5L).equals(value)) return "Call-Drop-Req";
            if (new Long(6L).equals(value)) return "Idle-Timeout";
            if (new Long(7L).equals(value)) return "Session-Timeout";
            if (new Long(8L).equals(value)) return "User-Req-Drop";
            if (new Long(9L).equals(value)) return "Host-Req-Drop";
            if (new Long(10L).equals(value)) return "Service-Interruption";
            if (new Long(11L).equals(value)) return "Service-Unavailable";
            if (new Long(12L).equals(value)) return "User-Input-Error";
            if (new Long(13L).equals(value)) return "NAS-Drop-For-Callback";
            if (new Long(14L).equals(value)) return "NAS-Drop-Misc-Non-Error";
            if (new Long(15L).equals(value)) return "NAS-Internal-Error";
            if (new Long(16L).equals(value)) return "Line-Busy";
            if (new Long(19L).equals(value)) return "Tunnel-Term-Unreach";
            if (new Long(20L).equals(value)) return "Tunnel-Refused";
            if (new Long(21L).equals(value)) return "Tunnel-Auth-Failed";
            if (new Long(22L).equals(value)) return "Tunnel-Session-Timeout";
            if (new Long(23L).equals(value)) return "Tunnel-Timeout";
            if (new Long(25L).equals(value)) return "Radius-Res-Reclaim";
            if (new Long(26L).equals(value)) return "DNIS-Auth-Failed";
            if (new Long(27L).equals(value)) return "PAP-Auth-Failure";
            if (new Long(28L).equals(value)) return "CHAP-Auth-Failure";
            if (new Long(29L).equals(value)) return "PPP-LCP-Failed";
            if (new Long(30L).equals(value)) return "PPP-NCP-Failed";
            if (new Long(31L).equals(value)) return "Radius-Timeout";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("4,0");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_USRHARCDisconnectCode()
    {
        setup();
    }

    public Attr_USRHARCDisconnectCode(Serializable o)
    {
        setup(o);
    }
}
