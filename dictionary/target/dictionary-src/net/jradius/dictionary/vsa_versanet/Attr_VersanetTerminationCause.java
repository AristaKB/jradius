// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary.vsa_versanet;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Versanet-Termination-Cause<br>
 * Attribute Type: 26<br>
 * Vendor Id: 2180<br>
 * VSA Type: 1<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Normal-Hangup-No-Error-Occurred (0)
 * <li> Call-Waiting-Caused-Disconnect (3)
 * <li> Physical-Carrier-Loss (4)
 * <li> No-err-correction-at-other-end (5)
 * <li> No-resp-to-feature-negotiation (6)
 * <li> 1st-modem-async-only-2nd-sync (7)
 * <li> No-framing-technique-in-common (8)
 * <li> No-protocol-in-common (9)
 * <li> Bad-resp-to-feature-negotiation (10)
 * <li> No-sync-info-from-remote-modem (11)
 * <li> Normal-Hangup-by-Remote-modem (12)
 * <li> Retransmission-limit-reached (13)
 * <li> Protocol-violation-occurred (14)
 * <li> Lost-DTR (15)
 * <li> Received-GSTN-cleardown (16)
 * <li> Inactivity-timeout (17)
 * <li> Speed-not-supported (18)
 * <li> Long-space-disconnect (19)
 * <li> Key-abort-disconnect (20)
 * <li> Clears-previous-disc-reason (21)
 * <li> No-connection-established (22)
 * <li> Disconnect-after-three-retrains (23)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_VersanetTerminationCause extends VSAttribute
{
    public static final String NAME = "Versanet-Termination-Cause";
    public static final int VENDOR_ID = 2180;
    public static final int VSA_TYPE = 1;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long NormalHangupNoErrorOccurred = new Long(0L);
    public static final Long CallWaitingCausedDisconnect = new Long(3L);
    public static final Long PhysicalCarrierLoss = new Long(4L);
    public static final Long Noerrcorrectionatotherend = new Long(5L);
    public static final Long Noresptofeaturenegotiation = new Long(6L);
    public static final Long _1stmodemasynconly2ndsync = new Long(7L);
    public static final Long Noframingtechniqueincommon = new Long(8L);
    public static final Long Noprotocolincommon = new Long(9L);
    public static final Long Badresptofeaturenegotiation = new Long(10L);
    public static final Long Nosyncinfofromremotemodem = new Long(11L);
    public static final Long NormalHangupbyRemotemodem = new Long(12L);
    public static final Long Retransmissionlimitreached = new Long(13L);
    public static final Long Protocolviolationoccurred = new Long(14L);
    public static final Long LostDTR = new Long(15L);
    public static final Long ReceivedGSTNcleardown = new Long(16L);
    public static final Long Inactivitytimeout = new Long(17L);
    public static final Long Speednotsupported = new Long(18L);
    public static final Long Longspacedisconnect = new Long(19L);
    public static final Long Keyabortdisconnect = new Long(20L);
    public static final Long Clearspreviousdiscreason = new Long(21L);
    public static final Long Noconnectionestablished = new Long(22L);
    public static final Long Disconnectafterthreeretrains = new Long(23L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(15L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Normal-Hangup-No-Error-Occurred".equals(name)) return new Long(0L);
            if ("Call-Waiting-Caused-Disconnect".equals(name)) return new Long(3L);
            if ("Physical-Carrier-Loss".equals(name)) return new Long(4L);
            if ("No-err-correction-at-other-end".equals(name)) return new Long(5L);
            if ("No-resp-to-feature-negotiation".equals(name)) return new Long(6L);
            if ("1st-modem-async-only-2nd-sync".equals(name)) return new Long(7L);
            if ("No-framing-technique-in-common".equals(name)) return new Long(8L);
            if ("No-protocol-in-common".equals(name)) return new Long(9L);
            if ("Bad-resp-to-feature-negotiation".equals(name)) return new Long(10L);
            if ("No-sync-info-from-remote-modem".equals(name)) return new Long(11L);
            if ("Normal-Hangup-by-Remote-modem".equals(name)) return new Long(12L);
            if ("Retransmission-limit-reached".equals(name)) return new Long(13L);
            if ("Protocol-violation-occurred".equals(name)) return new Long(14L);
            if ("Lost-DTR".equals(name)) return new Long(15L);
            if ("Received-GSTN-cleardown".equals(name)) return new Long(16L);
            if ("Inactivity-timeout".equals(name)) return new Long(17L);
            if ("Speed-not-supported".equals(name)) return new Long(18L);
            if ("Long-space-disconnect".equals(name)) return new Long(19L);
            if ("Key-abort-disconnect".equals(name)) return new Long(20L);
            if ("Clears-previous-disc-reason".equals(name)) return new Long(21L);
            if ("No-connection-established".equals(name)) return new Long(22L);
            if ("Disconnect-after-three-retrains".equals(name)) return new Long(23L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "Normal-Hangup-No-Error-Occurred";
            if (new Long(3L).equals(value)) return "Call-Waiting-Caused-Disconnect";
            if (new Long(4L).equals(value)) return "Physical-Carrier-Loss";
            if (new Long(5L).equals(value)) return "No-err-correction-at-other-end";
            if (new Long(6L).equals(value)) return "No-resp-to-feature-negotiation";
            if (new Long(7L).equals(value)) return "1st-modem-async-only-2nd-sync";
            if (new Long(8L).equals(value)) return "No-framing-technique-in-common";
            if (new Long(9L).equals(value)) return "No-protocol-in-common";
            if (new Long(10L).equals(value)) return "Bad-resp-to-feature-negotiation";
            if (new Long(11L).equals(value)) return "No-sync-info-from-remote-modem";
            if (new Long(12L).equals(value)) return "Normal-Hangup-by-Remote-modem";
            if (new Long(13L).equals(value)) return "Retransmission-limit-reached";
            if (new Long(14L).equals(value)) return "Protocol-violation-occurred";
            if (new Long(15L).equals(value)) return "Lost-DTR";
            if (new Long(16L).equals(value)) return "Received-GSTN-cleardown";
            if (new Long(17L).equals(value)) return "Inactivity-timeout";
            if (new Long(18L).equals(value)) return "Speed-not-supported";
            if (new Long(19L).equals(value)) return "Long-space-disconnect";
            if (new Long(20L).equals(value)) return "Key-abort-disconnect";
            if (new Long(21L).equals(value)) return "Clears-previous-disc-reason";
            if (new Long(22L).equals(value)) return "No-connection-established";
            if (new Long(23L).equals(value)) return "Disconnect-after-three-retrains";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_VersanetTerminationCause()
    {
        setup();
    }

    public Attr_VersanetTerminationCause(Serializable o)
    {
        setup(o);
    }
}
