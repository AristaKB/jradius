// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Response-Packet-Type<br>
 * Attribute Type: 1080 (FreeRADIUS Internal Attribute)<br><br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Access-Request (1)
 * <li> Access-Accept (2)
 * <li> Access-Reject (3)
 * <li> Accounting-Request (4)
 * <li> Accounting-Response (5)
 * <li> Accounting-Status (6)
 * <li> Password-Request (7)
 * <li> Password-Accept (8)
 * <li> Password-Reject (9)
 * <li> Accounting-Message (10)
 * <li> Access-Challenge (11)
 * <li> Status-Server (12)
 * <li> Status-Client (13)
 * <li> Disconnect-Request (40)
 * <li> Disconnect-ACK (41)
 * <li> Disconnect-NAK (42)
 * <li> CoA-Request (43)
 * <li> CoA-ACK (44)
 * <li> CoA-NAK (45)
 * <li> Do-Not-Respond (256)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_ResponsePacketType extends RadiusAttribute
{
    public static final String NAME = "Response-Packet-Type";
    public static final long TYPE = 1080;

    public static final long serialVersionUID = TYPE;

    public static final Long AccessRequest = new Long(1L);
    public static final Long AccessAccept = new Long(2L);
    public static final Long AccessReject = new Long(3L);
    public static final Long AccountingRequest = new Long(4L);
    public static final Long AccountingResponse = new Long(5L);
    public static final Long AccountingStatus = new Long(6L);
    public static final Long PasswordRequest = new Long(7L);
    public static final Long PasswordAccept = new Long(8L);
    public static final Long PasswordReject = new Long(9L);
    public static final Long AccountingMessage = new Long(10L);
    public static final Long AccessChallenge = new Long(11L);
    public static final Long StatusServer = new Long(12L);
    public static final Long StatusClient = new Long(13L);
    public static final Long DisconnectRequest = new Long(40L);
    public static final Long DisconnectACK = new Long(41L);
    public static final Long DisconnectNAK = new Long(42L);
    public static final Long CoARequest = new Long(43L);
    public static final Long CoAACK = new Long(44L);
    public static final Long CoANAK = new Long(45L);
    public static final Long DoNotRespond = new Long(256L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L),new Long(8L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(40L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(256L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Access-Request".equals(name)) return new Long(1L);
            if ("Access-Accept".equals(name)) return new Long(2L);
            if ("Access-Reject".equals(name)) return new Long(3L);
            if ("Accounting-Request".equals(name)) return new Long(4L);
            if ("Accounting-Response".equals(name)) return new Long(5L);
            if ("Accounting-Status".equals(name)) return new Long(6L);
            if ("Password-Request".equals(name)) return new Long(7L);
            if ("Password-Accept".equals(name)) return new Long(8L);
            if ("Password-Reject".equals(name)) return new Long(9L);
            if ("Accounting-Message".equals(name)) return new Long(10L);
            if ("Access-Challenge".equals(name)) return new Long(11L);
            if ("Status-Server".equals(name)) return new Long(12L);
            if ("Status-Client".equals(name)) return new Long(13L);
            if ("Disconnect-Request".equals(name)) return new Long(40L);
            if ("Disconnect-ACK".equals(name)) return new Long(41L);
            if ("Disconnect-NAK".equals(name)) return new Long(42L);
            if ("CoA-Request".equals(name)) return new Long(43L);
            if ("CoA-ACK".equals(name)) return new Long(44L);
            if ("CoA-NAK".equals(name)) return new Long(45L);
            if ("Do-Not-Respond".equals(name)) return new Long(256L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "Access-Request";
            if (new Long(2L).equals(value)) return "Access-Accept";
            if (new Long(3L).equals(value)) return "Access-Reject";
            if (new Long(4L).equals(value)) return "Accounting-Request";
            if (new Long(5L).equals(value)) return "Accounting-Response";
            if (new Long(6L).equals(value)) return "Accounting-Status";
            if (new Long(7L).equals(value)) return "Password-Request";
            if (new Long(8L).equals(value)) return "Password-Accept";
            if (new Long(9L).equals(value)) return "Password-Reject";
            if (new Long(10L).equals(value)) return "Accounting-Message";
            if (new Long(11L).equals(value)) return "Access-Challenge";
            if (new Long(12L).equals(value)) return "Status-Server";
            if (new Long(13L).equals(value)) return "Status-Client";
            if (new Long(40L).equals(value)) return "Disconnect-Request";
            if (new Long(41L).equals(value)) return "Disconnect-ACK";
            if (new Long(42L).equals(value)) return "Disconnect-NAK";
            if (new Long(43L).equals(value)) return "CoA-Request";
            if (new Long(44L).equals(value)) return "CoA-ACK";
            if (new Long(45L).equals(value)) return "CoA-NAK";
            if (new Long(256L).equals(value)) return "Do-Not-Respond";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 1080;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_ResponsePacketType()
    {
        setup();
    }

    public Attr_ResponsePacketType(Serializable o)
    {
        setup(o);
    }
}
