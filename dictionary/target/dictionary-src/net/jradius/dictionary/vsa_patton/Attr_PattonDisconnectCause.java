// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_patton;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Patton-Disconnect-Cause<br>
 * Attribute Type: 26<br>
 * Vendor Id: 1768<br>
 * VSA Type: 35<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Valid-cause-code-not-yet-received (0x00)
 * <li> Unallocated-runassigned-number (0x01)
 * <li> No-route-to-specified-transit-network-WAN (0x02)
 * <li> No-route-to-destination (0x03)
 * <li> send-special-information-tone (0x04)
 * <li> misdialled-trunk-prefix (0x05)
 * <li> Channel-unacceptable (0x06)
 * <li> Call-awarded-and-being-delivered-in-an-established-channel (0x07)
 * <li> Prefix-0-dialed-but-not-allowed (0x08)
 * <li> Prefix-1-dialed-but-not-allowed (0x09)
 * <li> Prefix-1-dialed-but-not-required (0x0A)
 * <li> More-digits-received-than-allowed-call-is-proceeding (0x0B)
 * <li> Normal-call-clearing (0x10)
 * <li> User-busy (0x11)
 * <li> No-user-responding (0x12)
 * <li> no-answer-from-user (0x13)
 * <li> Call-rejected (0x15)
 * <li> Number-changed (0x16)
 * <li> Reverse-charging-rejected (0x17)
 * <li> Call-suspended (0x18)
 * <li> Call-resumed (0x19)
 * <li> Non-selected-user-clearing (0x1A)
 * <li> Destination-out-of-order (0x1B)
 * <li> Invalid-number-format-incomplete-number (0x1C)
 * <li> Facility-rejected (0x1D)
 * <li> Response-to-STATUS-ENQUIRY (0x1E)
 * <li> Normal-unspecified (0x1F)
 * <li> Circuit-out-of-order (0x21)
 * <li> No-circuit/channel-available (0x22)
 * <li> Destination-unattainable (0x23)
 * <li> Degraded-service (0x25)
 * <li> Network-WAN-out-of-order (0x26)
 * <li> Transit-delay-range-cannot-be-achieved (0x27)
 * <li> Throughput-range-cannot-be-achieved (0x28)
 * <li> Temporary-failure (0x29)
 * <li> Switching-equipment-congestion (0x2A)
 * <li> Access-information-discarded (0x2B)
 * <li> Requested-circuit-channel-not-available (0x2C)
 * <li> Pre-empted (0x2D)
 * <li> Precedence-call-blocked (0x2E)
 * <li> Resource-unavailable-unspecified (0x2F)
 * <li> Quality-of-service-unavailable (0x31)
 * <li> Requested-facility-not-subscribed (0x32)
 * <li> Reverse-charging-not-allowed (0x33)
 * <li> Outgoing-calls-barred (0x34)
 * <li> Outgoing-calls-barred-within-CUG (0x35)
 * <li> Incoming-calls-barred (0x36)
 * <li> Incoming-calls-barred-within-CUG (0x37)
 * <li> Call-waiting-not-subscribed (0x38)
 * <li> Bearer-capability-not-authorized (0x39)
 * <li> Bearer-capability-not-presently-available (0x3A)
 * <li> Service-or-option-not-available-unspecified (0x3F)
 * <li> Bearer-service-not-implemented (0x41)
 * <li> Channel-type-not-implemented (0x42)
 * <li> Transit-network-selection-not-implemented (0x43)
 * <li> Message-not-implemented (0x44)
 * <li> Requested-facility-not-implemented (0x45)
 * <li> Only-restricted-digital-information-bearer-capability-is-avail (0x46)
 * <li> Service-or-option-not-implemented-unspecified (0x4F)
 * <li> Invalid-call-reference-value (0x51)
 * <li> Identified-channel-does-not-exist (0x52)
 * <li> A-suspended-call-exists-but-this-call-identity-does-not (0x53)
 * <li> Call-identity-in-use (0x54)
 * <li> No-call-suspended (0x55)
 * <li> Call-having-the-requested-call-identity-has-been-cleared (0x56)
 * <li> Called-user-not-member-of-CUG (0x57)
 * <li> Incompatible-destination (0x58)
 * <li> Non-existent-abbreviated-address-entry (0x59)
 * <li> Destination-address-missing-and-direct-call-not-subscribed (0x5A)
 * <li> Invalid-transit-network-selection-national-use (0x5B)
 * <li> Invalid-facility-parameter (0x5C)
 * <li> Mandatory-information-element-is-missing (0x5D)
 * <li> Invalid-message-unspecified (0x5F)
 * <li> Mandatory-information-element-is-missing-2 (0x60)
 * <li> Message-type-non-existent-or-not-implemented (0x61)
 * <li> Message-not-compatible-with-call-state (0x62)
 * <li> information-element-nonexistant-or-not-implemented (0x63)
 * <li> Invalid-information-element-contents (0x64)
 * <li> Message-not-compatible-with-call-state-2 (0x65)
 * <li> Recovery-on-timer-expiry (0x66)
 * <li> parameter-non-existent-or-not-implemented-passed-on (0x67)
 * <li> Protocol-error-unspecified (0x6F)
 * <li> Internetworking-unspecified (0x7F)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_PattonDisconnectCause extends VSAttribute
{
    public static final String NAME = "Patton-Disconnect-Cause";
    public static final int VENDOR_ID = 1768;
    public static final int VSA_TYPE = 35;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long Validcausecodenotyetreceived = new Long(0x00L);
    public static final Long Unallocatedrunassignednumber = new Long(0x01L);
    public static final Long NoroutetospecifiedtransitnetworkWAN = new Long(0x02L);
    public static final Long Noroutetodestination = new Long(0x03L);
    public static final Long sendspecialinformationtone = new Long(0x04L);
    public static final Long misdialledtrunkprefix = new Long(0x05L);
    public static final Long Channelunacceptable = new Long(0x06L);
    public static final Long Callawardedandbeingdeliveredinanestablishedchannel = new Long(0x07L);
    public static final Long Prefix0dialedbutnotallowed = new Long(0x08L);
    public static final Long Prefix1dialedbutnotallowed = new Long(0x09L);
    public static final Long Prefix1dialedbutnotrequired = new Long(0x0AL);
    public static final Long Moredigitsreceivedthanallowedcallisproceeding = new Long(0x0BL);
    public static final Long Normalcallclearing = new Long(0x10L);
    public static final Long Userbusy = new Long(0x11L);
    public static final Long Nouserresponding = new Long(0x12L);
    public static final Long noanswerfromuser = new Long(0x13L);
    public static final Long Callrejected = new Long(0x15L);
    public static final Long Numberchanged = new Long(0x16L);
    public static final Long Reversechargingrejected = new Long(0x17L);
    public static final Long Callsuspended = new Long(0x18L);
    public static final Long Callresumed = new Long(0x19L);
    public static final Long Nonselecteduserclearing = new Long(0x1AL);
    public static final Long Destinationoutoforder = new Long(0x1BL);
    public static final Long Invalidnumberformatincompletenumber = new Long(0x1CL);
    public static final Long Facilityrejected = new Long(0x1DL);
    public static final Long ResponsetoSTATUSENQUIRY = new Long(0x1EL);
    public static final Long Normalunspecified = new Long(0x1FL);
    public static final Long Circuitoutoforder = new Long(0x21L);
    public static final Long Nocircuitchannelavailable = new Long(0x22L);
    public static final Long Destinationunattainable = new Long(0x23L);
    public static final Long Degradedservice = new Long(0x25L);
    public static final Long NetworkWANoutoforder = new Long(0x26L);
    public static final Long Transitdelayrangecannotbeachieved = new Long(0x27L);
    public static final Long Throughputrangecannotbeachieved = new Long(0x28L);
    public static final Long Temporaryfailure = new Long(0x29L);
    public static final Long Switchingequipmentcongestion = new Long(0x2AL);
    public static final Long Accessinformationdiscarded = new Long(0x2BL);
    public static final Long Requestedcircuitchannelnotavailable = new Long(0x2CL);
    public static final Long Preempted = new Long(0x2DL);
    public static final Long Precedencecallblocked = new Long(0x2EL);
    public static final Long Resourceunavailableunspecified = new Long(0x2FL);
    public static final Long Qualityofserviceunavailable = new Long(0x31L);
    public static final Long Requestedfacilitynotsubscribed = new Long(0x32L);
    public static final Long Reversechargingnotallowed = new Long(0x33L);
    public static final Long Outgoingcallsbarred = new Long(0x34L);
    public static final Long OutgoingcallsbarredwithinCUG = new Long(0x35L);
    public static final Long Incomingcallsbarred = new Long(0x36L);
    public static final Long IncomingcallsbarredwithinCUG = new Long(0x37L);
    public static final Long Callwaitingnotsubscribed = new Long(0x38L);
    public static final Long Bearercapabilitynotauthorized = new Long(0x39L);
    public static final Long Bearercapabilitynotpresentlyavailable = new Long(0x3AL);
    public static final Long Serviceoroptionnotavailableunspecified = new Long(0x3FL);
    public static final Long Bearerservicenotimplemented = new Long(0x41L);
    public static final Long Channeltypenotimplemented = new Long(0x42L);
    public static final Long Transitnetworkselectionnotimplemented = new Long(0x43L);
    public static final Long Messagenotimplemented = new Long(0x44L);
    public static final Long Requestedfacilitynotimplemented = new Long(0x45L);
    public static final Long Onlyrestricteddigitalinformationbearercapabilityisavail = new Long(0x46L);
    public static final Long Serviceoroptionnotimplementedunspecified = new Long(0x4FL);
    public static final Long Invalidcallreferencevalue = new Long(0x51L);
    public static final Long Identifiedchanneldoesnotexist = new Long(0x52L);
    public static final Long Asuspendedcallexistsbutthiscallidentitydoesnot = new Long(0x53L);
    public static final Long Callidentityinuse = new Long(0x54L);
    public static final Long Nocallsuspended = new Long(0x55L);
    public static final Long Callhavingtherequestedcallidentityhasbeencleared = new Long(0x56L);
    public static final Long CalledusernotmemberofCUG = new Long(0x57L);
    public static final Long Incompatibledestination = new Long(0x58L);
    public static final Long Nonexistentabbreviatedaddressentry = new Long(0x59L);
    public static final Long Destinationaddressmissinganddirectcallnotsubscribed = new Long(0x5AL);
    public static final Long Invalidtransitnetworkselectionnationaluse = new Long(0x5BL);
    public static final Long Invalidfacilityparameter = new Long(0x5CL);
    public static final Long Mandatoryinformationelementismissing = new Long(0x5DL);
    public static final Long Invalidmessageunspecified = new Long(0x5FL);
    public static final Long Mandatoryinformationelementismissing2 = new Long(0x60L);
    public static final Long Messagetypenonexistentornotimplemented = new Long(0x61L);
    public static final Long Messagenotcompatiblewithcallstate = new Long(0x62L);
    public static final Long informationelementnonexistantornotimplemented = new Long(0x63L);
    public static final Long Invalidinformationelementcontents = new Long(0x64L);
    public static final Long Messagenotcompatiblewithcallstate2 = new Long(0x65L);
    public static final Long Recoveryontimerexpiry = new Long(0x66L);
    public static final Long parameternonexistentornotimplementedpassedon = new Long(0x67L);
    public static final Long Protocolerrorunspecified = new Long(0x6FL);
    public static final Long Internetworkingunspecified = new Long(0x7FL);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0x00L),new Long(0x01L),new Long(0x02L),new Long(0x03L),new Long(0x04L),new Long(0x05L),new Long(0x06L),new Long(0x07L),new Long(0x08L),new Long(0x09L),new Long(0x0AL),new Long(0x0BL),new Long(0x10L),new Long(0x11L),new Long(0x12L),new Long(0x13L),new Long(0x15L),new Long(0x16L),new Long(0x17L),new Long(0x18L),new Long(0x19L),new Long(0x1AL),new Long(0x1BL),new Long(0x1CL),new Long(0x1DL),new Long(0x1EL),new Long(0x1FL),new Long(0x21L),new Long(0x22L),new Long(0x23L),new Long(0x25L),new Long(0x26L),new Long(0x27L),new Long(0x28L),new Long(0x29L),new Long(0x2AL),new Long(0x2BL),new Long(0x2CL),new Long(0x2DL),new Long(0x2EL),new Long(0x2FL),new Long(0x31L),new Long(0x32L),new Long(0x33L),new Long(0x34L),new Long(0x35L),new Long(0x36L),new Long(0x37L),new Long(0x38L),new Long(0x39L),new Long(0x3AL),new Long(0x3FL),new Long(0x41L),new Long(0x42L),new Long(0x43L),new Long(0x44L),new Long(0x45L),new Long(0x46L),new Long(0x4FL),new Long(0x51L),new Long(0x52L),new Long(0x53L),new Long(0x54L),new Long(0x55L),new Long(0x56L),new Long(0x57L),new Long(0x58L),new Long(0x59L),new Long(0x5AL),new Long(0x5BL),new Long(0x5CL),new Long(0x5DL),new Long(0x5FL),new Long(0x60L),new Long(0x61L),new Long(0x62L),new Long(0x63L),new Long(0x64L),new Long(0x65L),new Long(0x66L),new Long(0x67L),new Long(0x6FL),new Long(0x7FL)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Valid-cause-code-not-yet-received".equals(name)) return new Long(0x00L);
            if ("Unallocated-runassigned-number".equals(name)) return new Long(0x01L);
            if ("No-route-to-specified-transit-network-WAN".equals(name)) return new Long(0x02L);
            if ("No-route-to-destination".equals(name)) return new Long(0x03L);
            if ("send-special-information-tone".equals(name)) return new Long(0x04L);
            if ("misdialled-trunk-prefix".equals(name)) return new Long(0x05L);
            if ("Channel-unacceptable".equals(name)) return new Long(0x06L);
            if ("Call-awarded-and-being-delivered-in-an-established-channel".equals(name)) return new Long(0x07L);
            if ("Prefix-0-dialed-but-not-allowed".equals(name)) return new Long(0x08L);
            if ("Prefix-1-dialed-but-not-allowed".equals(name)) return new Long(0x09L);
            if ("Prefix-1-dialed-but-not-required".equals(name)) return new Long(0x0AL);
            if ("More-digits-received-than-allowed-call-is-proceeding".equals(name)) return new Long(0x0BL);
            if ("Normal-call-clearing".equals(name)) return new Long(0x10L);
            if ("User-busy".equals(name)) return new Long(0x11L);
            if ("No-user-responding".equals(name)) return new Long(0x12L);
            if ("no-answer-from-user".equals(name)) return new Long(0x13L);
            if ("Call-rejected".equals(name)) return new Long(0x15L);
            if ("Number-changed".equals(name)) return new Long(0x16L);
            if ("Reverse-charging-rejected".equals(name)) return new Long(0x17L);
            if ("Call-suspended".equals(name)) return new Long(0x18L);
            if ("Call-resumed".equals(name)) return new Long(0x19L);
            if ("Non-selected-user-clearing".equals(name)) return new Long(0x1AL);
            if ("Destination-out-of-order".equals(name)) return new Long(0x1BL);
            if ("Invalid-number-format-incomplete-number".equals(name)) return new Long(0x1CL);
            if ("Facility-rejected".equals(name)) return new Long(0x1DL);
            if ("Response-to-STATUS-ENQUIRY".equals(name)) return new Long(0x1EL);
            if ("Normal-unspecified".equals(name)) return new Long(0x1FL);
            if ("Circuit-out-of-order".equals(name)) return new Long(0x21L);
            if ("No-circuit/channel-available".equals(name)) return new Long(0x22L);
            if ("Destination-unattainable".equals(name)) return new Long(0x23L);
            if ("Degraded-service".equals(name)) return new Long(0x25L);
            if ("Network-WAN-out-of-order".equals(name)) return new Long(0x26L);
            if ("Transit-delay-range-cannot-be-achieved".equals(name)) return new Long(0x27L);
            if ("Throughput-range-cannot-be-achieved".equals(name)) return new Long(0x28L);
            if ("Temporary-failure".equals(name)) return new Long(0x29L);
            if ("Switching-equipment-congestion".equals(name)) return new Long(0x2AL);
            if ("Access-information-discarded".equals(name)) return new Long(0x2BL);
            if ("Requested-circuit-channel-not-available".equals(name)) return new Long(0x2CL);
            if ("Pre-empted".equals(name)) return new Long(0x2DL);
            if ("Precedence-call-blocked".equals(name)) return new Long(0x2EL);
            if ("Resource-unavailable-unspecified".equals(name)) return new Long(0x2FL);
            if ("Quality-of-service-unavailable".equals(name)) return new Long(0x31L);
            if ("Requested-facility-not-subscribed".equals(name)) return new Long(0x32L);
            if ("Reverse-charging-not-allowed".equals(name)) return new Long(0x33L);
            if ("Outgoing-calls-barred".equals(name)) return new Long(0x34L);
            if ("Outgoing-calls-barred-within-CUG".equals(name)) return new Long(0x35L);
            if ("Incoming-calls-barred".equals(name)) return new Long(0x36L);
            if ("Incoming-calls-barred-within-CUG".equals(name)) return new Long(0x37L);
            if ("Call-waiting-not-subscribed".equals(name)) return new Long(0x38L);
            if ("Bearer-capability-not-authorized".equals(name)) return new Long(0x39L);
            if ("Bearer-capability-not-presently-available".equals(name)) return new Long(0x3AL);
            if ("Service-or-option-not-available-unspecified".equals(name)) return new Long(0x3FL);
            if ("Bearer-service-not-implemented".equals(name)) return new Long(0x41L);
            if ("Channel-type-not-implemented".equals(name)) return new Long(0x42L);
            if ("Transit-network-selection-not-implemented".equals(name)) return new Long(0x43L);
            if ("Message-not-implemented".equals(name)) return new Long(0x44L);
            if ("Requested-facility-not-implemented".equals(name)) return new Long(0x45L);
            if ("Only-restricted-digital-information-bearer-capability-is-avail".equals(name)) return new Long(0x46L);
            if ("Service-or-option-not-implemented-unspecified".equals(name)) return new Long(0x4FL);
            if ("Invalid-call-reference-value".equals(name)) return new Long(0x51L);
            if ("Identified-channel-does-not-exist".equals(name)) return new Long(0x52L);
            if ("A-suspended-call-exists-but-this-call-identity-does-not".equals(name)) return new Long(0x53L);
            if ("Call-identity-in-use".equals(name)) return new Long(0x54L);
            if ("No-call-suspended".equals(name)) return new Long(0x55L);
            if ("Call-having-the-requested-call-identity-has-been-cleared".equals(name)) return new Long(0x56L);
            if ("Called-user-not-member-of-CUG".equals(name)) return new Long(0x57L);
            if ("Incompatible-destination".equals(name)) return new Long(0x58L);
            if ("Non-existent-abbreviated-address-entry".equals(name)) return new Long(0x59L);
            if ("Destination-address-missing-and-direct-call-not-subscribed".equals(name)) return new Long(0x5AL);
            if ("Invalid-transit-network-selection-national-use".equals(name)) return new Long(0x5BL);
            if ("Invalid-facility-parameter".equals(name)) return new Long(0x5CL);
            if ("Mandatory-information-element-is-missing".equals(name)) return new Long(0x5DL);
            if ("Invalid-message-unspecified".equals(name)) return new Long(0x5FL);
            if ("Mandatory-information-element-is-missing-2".equals(name)) return new Long(0x60L);
            if ("Message-type-non-existent-or-not-implemented".equals(name)) return new Long(0x61L);
            if ("Message-not-compatible-with-call-state".equals(name)) return new Long(0x62L);
            if ("information-element-nonexistant-or-not-implemented".equals(name)) return new Long(0x63L);
            if ("Invalid-information-element-contents".equals(name)) return new Long(0x64L);
            if ("Message-not-compatible-with-call-state-2".equals(name)) return new Long(0x65L);
            if ("Recovery-on-timer-expiry".equals(name)) return new Long(0x66L);
            if ("parameter-non-existent-or-not-implemented-passed-on".equals(name)) return new Long(0x67L);
            if ("Protocol-error-unspecified".equals(name)) return new Long(0x6FL);
            if ("Internetworking-unspecified".equals(name)) return new Long(0x7FL);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0x00L).equals(value)) return "Valid-cause-code-not-yet-received";
            if (new Long(0x01L).equals(value)) return "Unallocated-runassigned-number";
            if (new Long(0x02L).equals(value)) return "No-route-to-specified-transit-network-WAN";
            if (new Long(0x03L).equals(value)) return "No-route-to-destination";
            if (new Long(0x04L).equals(value)) return "send-special-information-tone";
            if (new Long(0x05L).equals(value)) return "misdialled-trunk-prefix";
            if (new Long(0x06L).equals(value)) return "Channel-unacceptable";
            if (new Long(0x07L).equals(value)) return "Call-awarded-and-being-delivered-in-an-established-channel";
            if (new Long(0x08L).equals(value)) return "Prefix-0-dialed-but-not-allowed";
            if (new Long(0x09L).equals(value)) return "Prefix-1-dialed-but-not-allowed";
            if (new Long(0x0AL).equals(value)) return "Prefix-1-dialed-but-not-required";
            if (new Long(0x0BL).equals(value)) return "More-digits-received-than-allowed-call-is-proceeding";
            if (new Long(0x10L).equals(value)) return "Normal-call-clearing";
            if (new Long(0x11L).equals(value)) return "User-busy";
            if (new Long(0x12L).equals(value)) return "No-user-responding";
            if (new Long(0x13L).equals(value)) return "no-answer-from-user";
            if (new Long(0x15L).equals(value)) return "Call-rejected";
            if (new Long(0x16L).equals(value)) return "Number-changed";
            if (new Long(0x17L).equals(value)) return "Reverse-charging-rejected";
            if (new Long(0x18L).equals(value)) return "Call-suspended";
            if (new Long(0x19L).equals(value)) return "Call-resumed";
            if (new Long(0x1AL).equals(value)) return "Non-selected-user-clearing";
            if (new Long(0x1BL).equals(value)) return "Destination-out-of-order";
            if (new Long(0x1CL).equals(value)) return "Invalid-number-format-incomplete-number";
            if (new Long(0x1DL).equals(value)) return "Facility-rejected";
            if (new Long(0x1EL).equals(value)) return "Response-to-STATUS-ENQUIRY";
            if (new Long(0x1FL).equals(value)) return "Normal-unspecified";
            if (new Long(0x21L).equals(value)) return "Circuit-out-of-order";
            if (new Long(0x22L).equals(value)) return "No-circuit/channel-available";
            if (new Long(0x23L).equals(value)) return "Destination-unattainable";
            if (new Long(0x25L).equals(value)) return "Degraded-service";
            if (new Long(0x26L).equals(value)) return "Network-WAN-out-of-order";
            if (new Long(0x27L).equals(value)) return "Transit-delay-range-cannot-be-achieved";
            if (new Long(0x28L).equals(value)) return "Throughput-range-cannot-be-achieved";
            if (new Long(0x29L).equals(value)) return "Temporary-failure";
            if (new Long(0x2AL).equals(value)) return "Switching-equipment-congestion";
            if (new Long(0x2BL).equals(value)) return "Access-information-discarded";
            if (new Long(0x2CL).equals(value)) return "Requested-circuit-channel-not-available";
            if (new Long(0x2DL).equals(value)) return "Pre-empted";
            if (new Long(0x2EL).equals(value)) return "Precedence-call-blocked";
            if (new Long(0x2FL).equals(value)) return "Resource-unavailable-unspecified";
            if (new Long(0x31L).equals(value)) return "Quality-of-service-unavailable";
            if (new Long(0x32L).equals(value)) return "Requested-facility-not-subscribed";
            if (new Long(0x33L).equals(value)) return "Reverse-charging-not-allowed";
            if (new Long(0x34L).equals(value)) return "Outgoing-calls-barred";
            if (new Long(0x35L).equals(value)) return "Outgoing-calls-barred-within-CUG";
            if (new Long(0x36L).equals(value)) return "Incoming-calls-barred";
            if (new Long(0x37L).equals(value)) return "Incoming-calls-barred-within-CUG";
            if (new Long(0x38L).equals(value)) return "Call-waiting-not-subscribed";
            if (new Long(0x39L).equals(value)) return "Bearer-capability-not-authorized";
            if (new Long(0x3AL).equals(value)) return "Bearer-capability-not-presently-available";
            if (new Long(0x3FL).equals(value)) return "Service-or-option-not-available-unspecified";
            if (new Long(0x41L).equals(value)) return "Bearer-service-not-implemented";
            if (new Long(0x42L).equals(value)) return "Channel-type-not-implemented";
            if (new Long(0x43L).equals(value)) return "Transit-network-selection-not-implemented";
            if (new Long(0x44L).equals(value)) return "Message-not-implemented";
            if (new Long(0x45L).equals(value)) return "Requested-facility-not-implemented";
            if (new Long(0x46L).equals(value)) return "Only-restricted-digital-information-bearer-capability-is-avail";
            if (new Long(0x4FL).equals(value)) return "Service-or-option-not-implemented-unspecified";
            if (new Long(0x51L).equals(value)) return "Invalid-call-reference-value";
            if (new Long(0x52L).equals(value)) return "Identified-channel-does-not-exist";
            if (new Long(0x53L).equals(value)) return "A-suspended-call-exists-but-this-call-identity-does-not";
            if (new Long(0x54L).equals(value)) return "Call-identity-in-use";
            if (new Long(0x55L).equals(value)) return "No-call-suspended";
            if (new Long(0x56L).equals(value)) return "Call-having-the-requested-call-identity-has-been-cleared";
            if (new Long(0x57L).equals(value)) return "Called-user-not-member-of-CUG";
            if (new Long(0x58L).equals(value)) return "Incompatible-destination";
            if (new Long(0x59L).equals(value)) return "Non-existent-abbreviated-address-entry";
            if (new Long(0x5AL).equals(value)) return "Destination-address-missing-and-direct-call-not-subscribed";
            if (new Long(0x5BL).equals(value)) return "Invalid-transit-network-selection-national-use";
            if (new Long(0x5CL).equals(value)) return "Invalid-facility-parameter";
            if (new Long(0x5DL).equals(value)) return "Mandatory-information-element-is-missing";
            if (new Long(0x5FL).equals(value)) return "Invalid-message-unspecified";
            if (new Long(0x60L).equals(value)) return "Mandatory-information-element-is-missing-2";
            if (new Long(0x61L).equals(value)) return "Message-type-non-existent-or-not-implemented";
            if (new Long(0x62L).equals(value)) return "Message-not-compatible-with-call-state";
            if (new Long(0x63L).equals(value)) return "information-element-nonexistant-or-not-implemented";
            if (new Long(0x64L).equals(value)) return "Invalid-information-element-contents";
            if (new Long(0x65L).equals(value)) return "Message-not-compatible-with-call-state-2";
            if (new Long(0x66L).equals(value)) return "Recovery-on-timer-expiry";
            if (new Long(0x67L).equals(value)) return "parameter-non-existent-or-not-implemented-passed-on";
            if (new Long(0x6FL).equals(value)) return "Protocol-error-unspecified";
            if (new Long(0x7FL).equals(value)) return "Internetworking-unspecified";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_PattonDisconnectCause()
    {
        setup();
    }

    public Attr_PattonDisconnectCause(Serializable o)
    {
        setup(o);
    }
}
