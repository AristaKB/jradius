// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary.vsa_freeswitch;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Freeswitch-Hangupcause<br>
 * Attribute Type: 26<br>
 * Vendor Id: 27880<br>
 * VSA Type: 13<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> None (0)
 * <li> Unallocated-Number (1)
 * <li> No-Route-Transit-Net (2)
 * <li> No-Route-Destination (3)
 * <li> Channel-Unacceptable (6)
 * <li> Call-Awarded-Delivery (7)
 * <li> Normal-Clearing (16)
 * <li> User-Busy (17)
 * <li> No-User-Response (18)
 * <li> No-Answer (19)
 * <li> Subscriber-Absent (20)
 * <li> Call-Rejected (21)
 * <li> Number-Changed (22)
 * <li> Redirecto-To-New-Destination (23)
 * <li> Exchange-Routing-Error (25)
 * <li> Destination-Out-Of-Order (27)
 * <li> Invalid-Number-Format (28)
 * <li> Facility-Rejected (29)
 * <li> Response-To-Status-Enquiry (30)
 * <li> Normal-Unspecified (31)
 * <li> Normal-Circuit-Congestion (34)
 * <li> Network-Out-Of-Order (38)
 * <li> Normal-Temporary-Failure (41)
 * <li> Switch-Congestion (42)
 * <li> Access-Info-Discarded (43)
 * <li> Requested-Chan-Unavail (44)
 * <li> Pre-Empted (45)
 * <li> Facility-Not-Subscribed (50)
 * <li> Outgoing-Call-Barred (52)
 * <li> Incoming-Call-Barred (54)
 * <li> Bearercapability-Notauth (57)
 * <li> Bearercapability-Notavail (58)
 * <li> Service-Unavailable (63)
 * <li> Bearercapability-Notimpl (65)
 * <li> Chan-Not-Implemented (66)
 * <li> Facility-Not-Implemented (69)
 * <li> Service-Not-Implemented (79)
 * <li> Invalid-Call-Reference (81)
 * <li> Incompatible-Destination (88)
 * <li> Invalid-Msg-Unspecified (95)
 * <li> Mandatory-IE-Missing (96)
 * <li> Message-Type-Nonexist (97)
 * <li> Wrong-Message (98)
 * <li> IE-Nonexist (99)
 * <li> Invalid-IE-Contents (100)
 * <li> Wrong-Call-State (101)
 * <li> Recovery-On-Timer-Expire (102)
 * <li> Mandatory-IE-Length-Error (103)
 * <li> Protocol-Error (111)
 * <li> Interworking (127)
 * <li> Success (142)
 * <li> Originator-Cancel (487)
 * <li> Crash (500)
 * <li> System-Shutdown (501)
 * <li> Lose-Race (502)
 * <li> Manager-Request (503)
 * <li> Blind-Transfer (600)
 * <li> Attended-Transfer (601)
 * <li> Allotted-Timeout (602)
 * <li> User-Challenge (603)
 * <li> Media-Timeout (604)
 * <li> Picked-Off (605)
 * <li> User-Not-Registered (606)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_FreeswitchHangupcause extends VSAttribute
{
    public static final String NAME = "Freeswitch-Hangupcause";
    public static final int VENDOR_ID = 27880;
    public static final int VSA_TYPE = 13;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long None = new Long(0L);
    public static final Long UnallocatedNumber = new Long(1L);
    public static final Long NoRouteTransitNet = new Long(2L);
    public static final Long NoRouteDestination = new Long(3L);
    public static final Long ChannelUnacceptable = new Long(6L);
    public static final Long CallAwardedDelivery = new Long(7L);
    public static final Long NormalClearing = new Long(16L);
    public static final Long UserBusy = new Long(17L);
    public static final Long NoUserResponse = new Long(18L);
    public static final Long NoAnswer = new Long(19L);
    public static final Long SubscriberAbsent = new Long(20L);
    public static final Long CallRejected = new Long(21L);
    public static final Long NumberChanged = new Long(22L);
    public static final Long RedirectoToNewDestination = new Long(23L);
    public static final Long ExchangeRoutingError = new Long(25L);
    public static final Long DestinationOutOfOrder = new Long(27L);
    public static final Long InvalidNumberFormat = new Long(28L);
    public static final Long FacilityRejected = new Long(29L);
    public static final Long ResponseToStatusEnquiry = new Long(30L);
    public static final Long NormalUnspecified = new Long(31L);
    public static final Long NormalCircuitCongestion = new Long(34L);
    public static final Long NetworkOutOfOrder = new Long(38L);
    public static final Long NormalTemporaryFailure = new Long(41L);
    public static final Long SwitchCongestion = new Long(42L);
    public static final Long AccessInfoDiscarded = new Long(43L);
    public static final Long RequestedChanUnavail = new Long(44L);
    public static final Long PreEmpted = new Long(45L);
    public static final Long FacilityNotSubscribed = new Long(50L);
    public static final Long OutgoingCallBarred = new Long(52L);
    public static final Long IncomingCallBarred = new Long(54L);
    public static final Long BearercapabilityNotauth = new Long(57L);
    public static final Long BearercapabilityNotavail = new Long(58L);
    public static final Long ServiceUnavailable = new Long(63L);
    public static final Long BearercapabilityNotimpl = new Long(65L);
    public static final Long ChanNotImplemented = new Long(66L);
    public static final Long FacilityNotImplemented = new Long(69L);
    public static final Long ServiceNotImplemented = new Long(79L);
    public static final Long InvalidCallReference = new Long(81L);
    public static final Long IncompatibleDestination = new Long(88L);
    public static final Long InvalidMsgUnspecified = new Long(95L);
    public static final Long MandatoryIEMissing = new Long(96L);
    public static final Long MessageTypeNonexist = new Long(97L);
    public static final Long WrongMessage = new Long(98L);
    public static final Long IENonexist = new Long(99L);
    public static final Long InvalidIEContents = new Long(100L);
    public static final Long WrongCallState = new Long(101L);
    public static final Long RecoveryOnTimerExpire = new Long(102L);
    public static final Long MandatoryIELengthError = new Long(103L);
    public static final Long ProtocolError = new Long(111L);
    public static final Long Interworking = new Long(127L);
    public static final Long Success = new Long(142L);
    public static final Long OriginatorCancel = new Long(487L);
    public static final Long Crash = new Long(500L);
    public static final Long SystemShutdown = new Long(501L);
    public static final Long LoseRace = new Long(502L);
    public static final Long ManagerRequest = new Long(503L);
    public static final Long BlindTransfer = new Long(600L);
    public static final Long AttendedTransfer = new Long(601L);
    public static final Long AllottedTimeout = new Long(602L);
    public static final Long UserChallenge = new Long(603L);
    public static final Long MediaTimeout = new Long(604L);
    public static final Long PickedOff = new Long(605L);
    public static final Long UserNotRegistered = new Long(606L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(3L),new Long(6L),new Long(7L),new Long(16L),new Long(17L),new Long(18L),new Long(19L),new Long(20L),new Long(21L),new Long(22L),new Long(23L),new Long(25L),new Long(27L),new Long(28L),new Long(29L),new Long(30L),new Long(31L),new Long(34L),new Long(38L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(50L),new Long(52L),new Long(54L),new Long(57L),new Long(58L),new Long(63L),new Long(65L),new Long(66L),new Long(69L),new Long(79L),new Long(81L),new Long(88L),new Long(95L),new Long(96L),new Long(97L),new Long(98L),new Long(99L),new Long(100L),new Long(101L),new Long(102L),new Long(103L),new Long(111L),new Long(127L),new Long(142L),new Long(487L),new Long(500L),new Long(501L),new Long(502L),new Long(503L),new Long(600L),new Long(601L),new Long(602L),new Long(603L),new Long(604L),new Long(605L),new Long(606L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("None".equals(name)) return new Long(0L);
            if ("Unallocated-Number".equals(name)) return new Long(1L);
            if ("No-Route-Transit-Net".equals(name)) return new Long(2L);
            if ("No-Route-Destination".equals(name)) return new Long(3L);
            if ("Channel-Unacceptable".equals(name)) return new Long(6L);
            if ("Call-Awarded-Delivery".equals(name)) return new Long(7L);
            if ("Normal-Clearing".equals(name)) return new Long(16L);
            if ("User-Busy".equals(name)) return new Long(17L);
            if ("No-User-Response".equals(name)) return new Long(18L);
            if ("No-Answer".equals(name)) return new Long(19L);
            if ("Subscriber-Absent".equals(name)) return new Long(20L);
            if ("Call-Rejected".equals(name)) return new Long(21L);
            if ("Number-Changed".equals(name)) return new Long(22L);
            if ("Redirecto-To-New-Destination".equals(name)) return new Long(23L);
            if ("Exchange-Routing-Error".equals(name)) return new Long(25L);
            if ("Destination-Out-Of-Order".equals(name)) return new Long(27L);
            if ("Invalid-Number-Format".equals(name)) return new Long(28L);
            if ("Facility-Rejected".equals(name)) return new Long(29L);
            if ("Response-To-Status-Enquiry".equals(name)) return new Long(30L);
            if ("Normal-Unspecified".equals(name)) return new Long(31L);
            if ("Normal-Circuit-Congestion".equals(name)) return new Long(34L);
            if ("Network-Out-Of-Order".equals(name)) return new Long(38L);
            if ("Normal-Temporary-Failure".equals(name)) return new Long(41L);
            if ("Switch-Congestion".equals(name)) return new Long(42L);
            if ("Access-Info-Discarded".equals(name)) return new Long(43L);
            if ("Requested-Chan-Unavail".equals(name)) return new Long(44L);
            if ("Pre-Empted".equals(name)) return new Long(45L);
            if ("Facility-Not-Subscribed".equals(name)) return new Long(50L);
            if ("Outgoing-Call-Barred".equals(name)) return new Long(52L);
            if ("Incoming-Call-Barred".equals(name)) return new Long(54L);
            if ("Bearercapability-Notauth".equals(name)) return new Long(57L);
            if ("Bearercapability-Notavail".equals(name)) return new Long(58L);
            if ("Service-Unavailable".equals(name)) return new Long(63L);
            if ("Bearercapability-Notimpl".equals(name)) return new Long(65L);
            if ("Chan-Not-Implemented".equals(name)) return new Long(66L);
            if ("Facility-Not-Implemented".equals(name)) return new Long(69L);
            if ("Service-Not-Implemented".equals(name)) return new Long(79L);
            if ("Invalid-Call-Reference".equals(name)) return new Long(81L);
            if ("Incompatible-Destination".equals(name)) return new Long(88L);
            if ("Invalid-Msg-Unspecified".equals(name)) return new Long(95L);
            if ("Mandatory-IE-Missing".equals(name)) return new Long(96L);
            if ("Message-Type-Nonexist".equals(name)) return new Long(97L);
            if ("Wrong-Message".equals(name)) return new Long(98L);
            if ("IE-Nonexist".equals(name)) return new Long(99L);
            if ("Invalid-IE-Contents".equals(name)) return new Long(100L);
            if ("Wrong-Call-State".equals(name)) return new Long(101L);
            if ("Recovery-On-Timer-Expire".equals(name)) return new Long(102L);
            if ("Mandatory-IE-Length-Error".equals(name)) return new Long(103L);
            if ("Protocol-Error".equals(name)) return new Long(111L);
            if ("Interworking".equals(name)) return new Long(127L);
            if ("Success".equals(name)) return new Long(142L);
            if ("Originator-Cancel".equals(name)) return new Long(487L);
            if ("Crash".equals(name)) return new Long(500L);
            if ("System-Shutdown".equals(name)) return new Long(501L);
            if ("Lose-Race".equals(name)) return new Long(502L);
            if ("Manager-Request".equals(name)) return new Long(503L);
            if ("Blind-Transfer".equals(name)) return new Long(600L);
            if ("Attended-Transfer".equals(name)) return new Long(601L);
            if ("Allotted-Timeout".equals(name)) return new Long(602L);
            if ("User-Challenge".equals(name)) return new Long(603L);
            if ("Media-Timeout".equals(name)) return new Long(604L);
            if ("Picked-Off".equals(name)) return new Long(605L);
            if ("User-Not-Registered".equals(name)) return new Long(606L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "None";
            if (new Long(1L).equals(value)) return "Unallocated-Number";
            if (new Long(2L).equals(value)) return "No-Route-Transit-Net";
            if (new Long(3L).equals(value)) return "No-Route-Destination";
            if (new Long(6L).equals(value)) return "Channel-Unacceptable";
            if (new Long(7L).equals(value)) return "Call-Awarded-Delivery";
            if (new Long(16L).equals(value)) return "Normal-Clearing";
            if (new Long(17L).equals(value)) return "User-Busy";
            if (new Long(18L).equals(value)) return "No-User-Response";
            if (new Long(19L).equals(value)) return "No-Answer";
            if (new Long(20L).equals(value)) return "Subscriber-Absent";
            if (new Long(21L).equals(value)) return "Call-Rejected";
            if (new Long(22L).equals(value)) return "Number-Changed";
            if (new Long(23L).equals(value)) return "Redirecto-To-New-Destination";
            if (new Long(25L).equals(value)) return "Exchange-Routing-Error";
            if (new Long(27L).equals(value)) return "Destination-Out-Of-Order";
            if (new Long(28L).equals(value)) return "Invalid-Number-Format";
            if (new Long(29L).equals(value)) return "Facility-Rejected";
            if (new Long(30L).equals(value)) return "Response-To-Status-Enquiry";
            if (new Long(31L).equals(value)) return "Normal-Unspecified";
            if (new Long(34L).equals(value)) return "Normal-Circuit-Congestion";
            if (new Long(38L).equals(value)) return "Network-Out-Of-Order";
            if (new Long(41L).equals(value)) return "Normal-Temporary-Failure";
            if (new Long(42L).equals(value)) return "Switch-Congestion";
            if (new Long(43L).equals(value)) return "Access-Info-Discarded";
            if (new Long(44L).equals(value)) return "Requested-Chan-Unavail";
            if (new Long(45L).equals(value)) return "Pre-Empted";
            if (new Long(50L).equals(value)) return "Facility-Not-Subscribed";
            if (new Long(52L).equals(value)) return "Outgoing-Call-Barred";
            if (new Long(54L).equals(value)) return "Incoming-Call-Barred";
            if (new Long(57L).equals(value)) return "Bearercapability-Notauth";
            if (new Long(58L).equals(value)) return "Bearercapability-Notavail";
            if (new Long(63L).equals(value)) return "Service-Unavailable";
            if (new Long(65L).equals(value)) return "Bearercapability-Notimpl";
            if (new Long(66L).equals(value)) return "Chan-Not-Implemented";
            if (new Long(69L).equals(value)) return "Facility-Not-Implemented";
            if (new Long(79L).equals(value)) return "Service-Not-Implemented";
            if (new Long(81L).equals(value)) return "Invalid-Call-Reference";
            if (new Long(88L).equals(value)) return "Incompatible-Destination";
            if (new Long(95L).equals(value)) return "Invalid-Msg-Unspecified";
            if (new Long(96L).equals(value)) return "Mandatory-IE-Missing";
            if (new Long(97L).equals(value)) return "Message-Type-Nonexist";
            if (new Long(98L).equals(value)) return "Wrong-Message";
            if (new Long(99L).equals(value)) return "IE-Nonexist";
            if (new Long(100L).equals(value)) return "Invalid-IE-Contents";
            if (new Long(101L).equals(value)) return "Wrong-Call-State";
            if (new Long(102L).equals(value)) return "Recovery-On-Timer-Expire";
            if (new Long(103L).equals(value)) return "Mandatory-IE-Length-Error";
            if (new Long(111L).equals(value)) return "Protocol-Error";
            if (new Long(127L).equals(value)) return "Interworking";
            if (new Long(142L).equals(value)) return "Success";
            if (new Long(487L).equals(value)) return "Originator-Cancel";
            if (new Long(500L).equals(value)) return "Crash";
            if (new Long(501L).equals(value)) return "System-Shutdown";
            if (new Long(502L).equals(value)) return "Lose-Race";
            if (new Long(503L).equals(value)) return "Manager-Request";
            if (new Long(600L).equals(value)) return "Blind-Transfer";
            if (new Long(601L).equals(value)) return "Attended-Transfer";
            if (new Long(602L).equals(value)) return "Allotted-Timeout";
            if (new Long(603L).equals(value)) return "User-Challenge";
            if (new Long(604L).equals(value)) return "Media-Timeout";
            if (new Long(605L).equals(value)) return "Picked-Off";
            if (new Long(606L).equals(value)) return "User-Not-Registered";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_FreeswitchHangupcause()
    {
        setup();
    }

    public Attr_FreeswitchHangupcause(Serializable o)
    {
        setup(o);
    }
}
