// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary.vsa_starent;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.VSAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: SN-PPP-Data-Compression<br>
 * Attribute Type: 26<br>
 * Vendor Id: 8164<br>
 * VSA Type: 9<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> None (0)
 * <li> Stac-LZS (1)
 * <li> MPPC (2)
 * <li> MPCC-Stac-LZS (3)
 * <li> Deflate (4)
 * <li> Deflate-Stac-LZS (5)
 * <li> Deflate-MPCC (6)
 * <li> Deflate-MPCC-Stac-LZS (7)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_SNPPPDataCompression extends VSAttribute
{
    public static final String NAME = "SN-PPP-Data-Compression";
    public static final int VENDOR_ID = 8164;
    public static final int VSA_TYPE = 9;
    public static final long TYPE = ((VENDOR_ID & 0xFFFF) << 16) | VSA_TYPE;

    public static final long serialVersionUID = TYPE;

    public static final Long None = new Long(0L);
    public static final Long StacLZS = new Long(1L);
    public static final Long MPPC = new Long(2L);
    public static final Long MPCCStacLZS = new Long(3L);
    public static final Long Deflate = new Long(4L);
    public static final Long DeflateStacLZS = new Long(5L);
    public static final Long DeflateMPCC = new Long(6L);
    public static final Long DeflateMPCCStacLZS = new Long(7L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(1L),new Long(2L),new Long(3L),new Long(4L),new Long(5L),new Long(6L),new Long(7L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("None".equals(name)) return new Long(0L);
            if ("Stac-LZS".equals(name)) return new Long(1L);
            if ("MPPC".equals(name)) return new Long(2L);
            if ("MPCC-Stac-LZS".equals(name)) return new Long(3L);
            if ("Deflate".equals(name)) return new Long(4L);
            if ("Deflate-Stac-LZS".equals(name)) return new Long(5L);
            if ("Deflate-MPCC".equals(name)) return new Long(6L);
            if ("Deflate-MPCC-Stac-LZS".equals(name)) return new Long(7L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "None";
            if (new Long(1L).equals(value)) return "Stac-LZS";
            if (new Long(2L).equals(value)) return "MPPC";
            if (new Long(3L).equals(value)) return "MPCC-Stac-LZS";
            if (new Long(4L).equals(value)) return "Deflate";
            if (new Long(5L).equals(value)) return "Deflate-Stac-LZS";
            if (new Long(6L).equals(value)) return "Deflate-MPCC";
            if (new Long(7L).equals(value)) return "Deflate-MPCC-Stac-LZS";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 26;
        vendorId = VENDOR_ID;
        vsaAttributeType = VSA_TYPE;
        setFormat("2,2");
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_SNPPPDataCompression()
    {
        setup();
    }

    public Attr_SNPPPDataCompression(Serializable o)
    {
        setup(o);
    }
}
