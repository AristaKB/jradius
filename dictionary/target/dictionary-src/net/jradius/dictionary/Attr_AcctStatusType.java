// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Tue, 14 May 2024 12:35:13 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: Acct-Status-Type<br>
 * Attribute Type: 40<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> Start (1)
 * <li> Stop (2)
 * <li> Alive (3)
 * <li> Interim-Update (3)
 * <li> Accounting-On (7)
 * <li> Accounting-Off (8)
 * <li> Failed (15)
 * <li> Tunnel-Start (9)
 * <li> Tunnel-Stop (10)
 * <li> Tunnel-Reject (11)
 * <li> Tunnel-Link-Start (12)
 * <li> Tunnel-Link-Stop (13)
 * <li> Tunnel-Link-Reject (14)
 * <li> Annex-User-Reject (0x06300001)
 * <li> Annex-Call-Reject (0x06300002)
 * <li> Annex-IPCP-Start (0x06300003)
 * <li> Annex-IPXCP-Start (0x06300004)
 * <li> Annex-ATCP-Start (0x06300005)
 * <li> Annex-Accounting-Restart (0x06300006)
 * <li> Annex-Accounting-Shutoff (0x06300007)
 * <li> Annex-Tunnel-Start (0x06300008)
 * <li> Annex-Tunnel-Stop (0x06300009)
 * <li> Annex-Tunnel-Reject (0x0630000a)
 * <li> Annex-Tunnel-Link-Start (0x0630000b)
 * <li> Annex-Tunnel-Link-Stop (0x0630000c)
 * <li> Annex-MP-Start (0x0630000d)
 * <li> Annex-MP-Stop (0x0630000e)
 * <li> Annex-Line-Seizure (0x0630000f)
 * <li> Annex-Rlogin-Start (0x06300010)
 * <li> Annex-Rlogin-Stop (0x06300011)
 * <li> One-Time (17)
 * <li> Modem-Start (4)
 * <li> Modem-Stop (5)
 * <li> Cancel (6)
 * <li> WB-Login (217)
 * <li> WB-Logout (218)
 * <li> WB-WRitelog (219)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_AcctStatusType extends RadiusAttribute
{
    public static final String NAME = "Acct-Status-Type";
    public static final long TYPE = 40;

    public static final long serialVersionUID = TYPE;

    public static final Long Start = new Long(1L);
    public static final Long Stop = new Long(2L);
    public static final Long Alive = new Long(3L);
    public static final Long InterimUpdate = new Long(3L);
    public static final Long AccountingOn = new Long(7L);
    public static final Long AccountingOff = new Long(8L);
    public static final Long Failed = new Long(15L);
    public static final Long TunnelStart = new Long(9L);
    public static final Long TunnelStop = new Long(10L);
    public static final Long TunnelReject = new Long(11L);
    public static final Long TunnelLinkStart = new Long(12L);
    public static final Long TunnelLinkStop = new Long(13L);
    public static final Long TunnelLinkReject = new Long(14L);
    public static final Long AnnexUserReject = new Long(0x06300001L);
    public static final Long AnnexCallReject = new Long(0x06300002L);
    public static final Long AnnexIPCPStart = new Long(0x06300003L);
    public static final Long AnnexIPXCPStart = new Long(0x06300004L);
    public static final Long AnnexATCPStart = new Long(0x06300005L);
    public static final Long AnnexAccountingRestart = new Long(0x06300006L);
    public static final Long AnnexAccountingShutoff = new Long(0x06300007L);
    public static final Long AnnexTunnelStart = new Long(0x06300008L);
    public static final Long AnnexTunnelStop = new Long(0x06300009L);
    public static final Long AnnexTunnelReject = new Long(0x0630000aL);
    public static final Long AnnexTunnelLinkStart = new Long(0x0630000bL);
    public static final Long AnnexTunnelLinkStop = new Long(0x0630000cL);
    public static final Long AnnexMPStart = new Long(0x0630000dL);
    public static final Long AnnexMPStop = new Long(0x0630000eL);
    public static final Long AnnexLineSeizure = new Long(0x0630000fL);
    public static final Long AnnexRloginStart = new Long(0x06300010L);
    public static final Long AnnexRloginStop = new Long(0x06300011L);
    public static final Long OneTime = new Long(17L);
    public static final Long ModemStart = new Long(4L);
    public static final Long ModemStop = new Long(5L);
    public static final Long Cancel = new Long(6L);
    public static final Long WBLogin = new Long(217L);
    public static final Long WBLogout = new Long(218L);
    public static final Long WBWRitelog = new Long(219L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(1L),new Long(2L),new Long(3L),new Long(7L),new Long(8L),new Long(15L),new Long(9L),new Long(10L),new Long(11L),new Long(12L),new Long(13L),new Long(14L),new Long(0x06300001L),new Long(0x06300002L),new Long(0x06300003L),new Long(0x06300004L),new Long(0x06300005L),new Long(0x06300006L),new Long(0x06300007L),new Long(0x06300008L),new Long(0x06300009L),new Long(0x0630000aL),new Long(0x0630000bL),new Long(0x0630000cL),new Long(0x0630000dL),new Long(0x0630000eL),new Long(0x0630000fL),new Long(0x06300010L),new Long(0x06300011L),new Long(17L),new Long(4L),new Long(5L),new Long(6L),new Long(217L),new Long(218L),new Long(219L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("Start".equals(name)) return new Long(1L);
            if ("Stop".equals(name)) return new Long(2L);
            if ("Alive".equals(name)) return new Long(3L);
            if ("Interim-Update".equals(name)) return new Long(3L);
            if ("Accounting-On".equals(name)) return new Long(7L);
            if ("Accounting-Off".equals(name)) return new Long(8L);
            if ("Failed".equals(name)) return new Long(15L);
            if ("Tunnel-Start".equals(name)) return new Long(9L);
            if ("Tunnel-Stop".equals(name)) return new Long(10L);
            if ("Tunnel-Reject".equals(name)) return new Long(11L);
            if ("Tunnel-Link-Start".equals(name)) return new Long(12L);
            if ("Tunnel-Link-Stop".equals(name)) return new Long(13L);
            if ("Tunnel-Link-Reject".equals(name)) return new Long(14L);
            if ("Annex-User-Reject".equals(name)) return new Long(0x06300001L);
            if ("Annex-Call-Reject".equals(name)) return new Long(0x06300002L);
            if ("Annex-IPCP-Start".equals(name)) return new Long(0x06300003L);
            if ("Annex-IPXCP-Start".equals(name)) return new Long(0x06300004L);
            if ("Annex-ATCP-Start".equals(name)) return new Long(0x06300005L);
            if ("Annex-Accounting-Restart".equals(name)) return new Long(0x06300006L);
            if ("Annex-Accounting-Shutoff".equals(name)) return new Long(0x06300007L);
            if ("Annex-Tunnel-Start".equals(name)) return new Long(0x06300008L);
            if ("Annex-Tunnel-Stop".equals(name)) return new Long(0x06300009L);
            if ("Annex-Tunnel-Reject".equals(name)) return new Long(0x0630000aL);
            if ("Annex-Tunnel-Link-Start".equals(name)) return new Long(0x0630000bL);
            if ("Annex-Tunnel-Link-Stop".equals(name)) return new Long(0x0630000cL);
            if ("Annex-MP-Start".equals(name)) return new Long(0x0630000dL);
            if ("Annex-MP-Stop".equals(name)) return new Long(0x0630000eL);
            if ("Annex-Line-Seizure".equals(name)) return new Long(0x0630000fL);
            if ("Annex-Rlogin-Start".equals(name)) return new Long(0x06300010L);
            if ("Annex-Rlogin-Stop".equals(name)) return new Long(0x06300011L);
            if ("One-Time".equals(name)) return new Long(17L);
            if ("Modem-Start".equals(name)) return new Long(4L);
            if ("Modem-Stop".equals(name)) return new Long(5L);
            if ("Cancel".equals(name)) return new Long(6L);
            if ("WB-Login".equals(name)) return new Long(217L);
            if ("WB-Logout".equals(name)) return new Long(218L);
            if ("WB-WRitelog".equals(name)) return new Long(219L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(1L).equals(value)) return "Start";
            if (new Long(2L).equals(value)) return "Stop";
            if (new Long(3L).equals(value)) return "Alive";
            if (new Long(7L).equals(value)) return "Accounting-On";
            if (new Long(8L).equals(value)) return "Accounting-Off";
            if (new Long(15L).equals(value)) return "Failed";
            if (new Long(9L).equals(value)) return "Tunnel-Start";
            if (new Long(10L).equals(value)) return "Tunnel-Stop";
            if (new Long(11L).equals(value)) return "Tunnel-Reject";
            if (new Long(12L).equals(value)) return "Tunnel-Link-Start";
            if (new Long(13L).equals(value)) return "Tunnel-Link-Stop";
            if (new Long(14L).equals(value)) return "Tunnel-Link-Reject";
            if (new Long(0x06300001L).equals(value)) return "Annex-User-Reject";
            if (new Long(0x06300002L).equals(value)) return "Annex-Call-Reject";
            if (new Long(0x06300003L).equals(value)) return "Annex-IPCP-Start";
            if (new Long(0x06300004L).equals(value)) return "Annex-IPXCP-Start";
            if (new Long(0x06300005L).equals(value)) return "Annex-ATCP-Start";
            if (new Long(0x06300006L).equals(value)) return "Annex-Accounting-Restart";
            if (new Long(0x06300007L).equals(value)) return "Annex-Accounting-Shutoff";
            if (new Long(0x06300008L).equals(value)) return "Annex-Tunnel-Start";
            if (new Long(0x06300009L).equals(value)) return "Annex-Tunnel-Stop";
            if (new Long(0x0630000aL).equals(value)) return "Annex-Tunnel-Reject";
            if (new Long(0x0630000bL).equals(value)) return "Annex-Tunnel-Link-Start";
            if (new Long(0x0630000cL).equals(value)) return "Annex-Tunnel-Link-Stop";
            if (new Long(0x0630000dL).equals(value)) return "Annex-MP-Start";
            if (new Long(0x0630000eL).equals(value)) return "Annex-MP-Stop";
            if (new Long(0x0630000fL).equals(value)) return "Annex-Line-Seizure";
            if (new Long(0x06300010L).equals(value)) return "Annex-Rlogin-Start";
            if (new Long(0x06300011L).equals(value)) return "Annex-Rlogin-Stop";
            if (new Long(17L).equals(value)) return "One-Time";
            if (new Long(4L).equals(value)) return "Modem-Start";
            if (new Long(5L).equals(value)) return "Modem-Stop";
            if (new Long(6L).equals(value)) return "Cancel";
            if (new Long(217L).equals(value)) return "WB-Login";
            if (new Long(218L).equals(value)) return "WB-Logout";
            if (new Long(219L).equals(value)) return "WB-WRitelog";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 40;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_AcctStatusType()
    {
        setup();
    }

    public Attr_AcctStatusType(Serializable o)
    {
        setup(o);
    }
}
