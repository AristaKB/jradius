// DO NOT EDIT THIS FILE DIRECTLY! - AUTOMATICALLY GENERATED
// Generated by: class net.jradius.freeradius.RadiusDictionary
// Generated on: Mon, 13 May 2024 11:07:32 +0530

package net.jradius.dictionary;

import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;

import net.jradius.packet.attribute.RadiusAttribute;
import net.jradius.packet.attribute.value.NamedValue;

/**
 * Attribute Name: X-Ascend-Connect-Progress<br>
 * Attribute Type: 196<br>
 * Value Type: NamedValue<br>
 * Possible Values: <br>
 * <ul>
 * <li> No-Progress (0)
 * <li> Call-Up (10)
 * <li> Modem-Up (30)
 * <li> Modem-Awaiting-DCD (31)
 * <li> Modem-Awaiting-Codes (32)
 * <li> TermSrv-Started (40)
 * <li> TermSrv-Raw-TCP-Started (41)
 * <li> TermSrv-Telnet-Started (42)
 * <li> TermSrv-Raw-TCP-Connected (43)
 * <li> TermSrv-Telnet-Connected (44)
 * <li> TermSrv-Rlogin-Started (45)
 * <li> TermSrv-Rlogin-Connected (46)
 * <li> Modem-Outdial-Call-Up (50)
 * <li> LAN-Session-Up (60)
 * <li> LCP-Opening (61)
 * <li> CCP-Opening (62)
 * <li> IPNCP-Opening (63)
 * <li> BNCP-Opening (64)
 * <li> LCP-Opened (65)
 * <li> CCP-Opened (66)
 * <li> IPNCP-Opened (67)
 * <li> BNCP-Opened (68)
 * <li> LCP-State-Initial (69)
 * <li> LCP-State-Starting (70)
 * <li> LCP-State-Closed (71)
 * <li> LCP-State-Stopped (72)
 * <li> LCP-State-Closing (73)
 * <li> LCP-State-Stopping (74)
 * <li> LCP-State-Request-Sent (75)
 * <li> LCP-State-Ack-Received (76)
 * <li> LCP-State-Ack-Sent (77)
 * <li> IPXNCP-Opened (80)
 * <li> ATNCP-Opened (81)
 * <li> BACP-Opening (82)
 * <li> BACP-Opened (83)
 * <li> V110-Up (90)
 * <li> V110-State-Opened (91)
 * <li> V110-State-Carrier (92)
 * <li> V110-State-Reset (93)
 * <li> V110-State-Closed (94)
 * </ul>
 *
 * @author class net.jradius.freeradius.RadiusDictionary
 */
public final class Attr_XAscendConnectProgress extends RadiusAttribute
{
    public static final String NAME = "X-Ascend-Connect-Progress";
    public static final long TYPE = 196;

    public static final long serialVersionUID = TYPE;

    public static final Long NoProgress = new Long(0L);
    public static final Long CallUp = new Long(10L);
    public static final Long ModemUp = new Long(30L);
    public static final Long ModemAwaitingDCD = new Long(31L);
    public static final Long ModemAwaitingCodes = new Long(32L);
    public static final Long TermSrvStarted = new Long(40L);
    public static final Long TermSrvRawTCPStarted = new Long(41L);
    public static final Long TermSrvTelnetStarted = new Long(42L);
    public static final Long TermSrvRawTCPConnected = new Long(43L);
    public static final Long TermSrvTelnetConnected = new Long(44L);
    public static final Long TermSrvRloginStarted = new Long(45L);
    public static final Long TermSrvRloginConnected = new Long(46L);
    public static final Long ModemOutdialCallUp = new Long(50L);
    public static final Long LANSessionUp = new Long(60L);
    public static final Long LCPOpening = new Long(61L);
    public static final Long CCPOpening = new Long(62L);
    public static final Long IPNCPOpening = new Long(63L);
    public static final Long BNCPOpening = new Long(64L);
    public static final Long LCPOpened = new Long(65L);
    public static final Long CCPOpened = new Long(66L);
    public static final Long IPNCPOpened = new Long(67L);
    public static final Long BNCPOpened = new Long(68L);
    public static final Long LCPStateInitial = new Long(69L);
    public static final Long LCPStateStarting = new Long(70L);
    public static final Long LCPStateClosed = new Long(71L);
    public static final Long LCPStateStopped = new Long(72L);
    public static final Long LCPStateClosing = new Long(73L);
    public static final Long LCPStateStopping = new Long(74L);
    public static final Long LCPStateRequestSent = new Long(75L);
    public static final Long LCPStateAckReceived = new Long(76L);
    public static final Long LCPStateAckSent = new Long(77L);
    public static final Long IPXNCPOpened = new Long(80L);
    public static final Long ATNCPOpened = new Long(81L);
    public static final Long BACPOpening = new Long(82L);
    public static final Long BACPOpened = new Long(83L);
    public static final Long V110Up = new Long(90L);
    public static final Long V110StateOpened = new Long(91L);
    public static final Long V110StateCarrier = new Long(92L);
    public static final Long V110StateReset = new Long(93L);
    public static final Long V110StateClosed = new Long(94L);

    @SuppressWarnings("serial")
    protected class NamedValueMap implements NamedValue.NamedValueMap, Serializable
    {
        public Long[] knownValues = { new Long(0L),new Long(10L),new Long(30L),new Long(31L),new Long(32L),new Long(40L),new Long(41L),new Long(42L),new Long(43L),new Long(44L),new Long(45L),new Long(46L),new Long(50L),new Long(60L),new Long(61L),new Long(62L),new Long(63L),new Long(64L),new Long(65L),new Long(66L),new Long(67L),new Long(68L),new Long(69L),new Long(70L),new Long(71L),new Long(72L),new Long(73L),new Long(74L),new Long(75L),new Long(76L),new Long(77L),new Long(80L),new Long(81L),new Long(82L),new Long(83L),new Long(90L),new Long(91L),new Long(92L),new Long(93L),new Long(94L)};

        public Long[] getKnownValues() { return knownValues; }

        public Long getNamedValue(String name)
        {
            if ("No-Progress".equals(name)) return new Long(0L);
            if ("Call-Up".equals(name)) return new Long(10L);
            if ("Modem-Up".equals(name)) return new Long(30L);
            if ("Modem-Awaiting-DCD".equals(name)) return new Long(31L);
            if ("Modem-Awaiting-Codes".equals(name)) return new Long(32L);
            if ("TermSrv-Started".equals(name)) return new Long(40L);
            if ("TermSrv-Raw-TCP-Started".equals(name)) return new Long(41L);
            if ("TermSrv-Telnet-Started".equals(name)) return new Long(42L);
            if ("TermSrv-Raw-TCP-Connected".equals(name)) return new Long(43L);
            if ("TermSrv-Telnet-Connected".equals(name)) return new Long(44L);
            if ("TermSrv-Rlogin-Started".equals(name)) return new Long(45L);
            if ("TermSrv-Rlogin-Connected".equals(name)) return new Long(46L);
            if ("Modem-Outdial-Call-Up".equals(name)) return new Long(50L);
            if ("LAN-Session-Up".equals(name)) return new Long(60L);
            if ("LCP-Opening".equals(name)) return new Long(61L);
            if ("CCP-Opening".equals(name)) return new Long(62L);
            if ("IPNCP-Opening".equals(name)) return new Long(63L);
            if ("BNCP-Opening".equals(name)) return new Long(64L);
            if ("LCP-Opened".equals(name)) return new Long(65L);
            if ("CCP-Opened".equals(name)) return new Long(66L);
            if ("IPNCP-Opened".equals(name)) return new Long(67L);
            if ("BNCP-Opened".equals(name)) return new Long(68L);
            if ("LCP-State-Initial".equals(name)) return new Long(69L);
            if ("LCP-State-Starting".equals(name)) return new Long(70L);
            if ("LCP-State-Closed".equals(name)) return new Long(71L);
            if ("LCP-State-Stopped".equals(name)) return new Long(72L);
            if ("LCP-State-Closing".equals(name)) return new Long(73L);
            if ("LCP-State-Stopping".equals(name)) return new Long(74L);
            if ("LCP-State-Request-Sent".equals(name)) return new Long(75L);
            if ("LCP-State-Ack-Received".equals(name)) return new Long(76L);
            if ("LCP-State-Ack-Sent".equals(name)) return new Long(77L);
            if ("IPXNCP-Opened".equals(name)) return new Long(80L);
            if ("ATNCP-Opened".equals(name)) return new Long(81L);
            if ("BACP-Opening".equals(name)) return new Long(82L);
            if ("BACP-Opened".equals(name)) return new Long(83L);
            if ("V110-Up".equals(name)) return new Long(90L);
            if ("V110-State-Opened".equals(name)) return new Long(91L);
            if ("V110-State-Carrier".equals(name)) return new Long(92L);
            if ("V110-State-Reset".equals(name)) return new Long(93L);
            if ("V110-State-Closed".equals(name)) return new Long(94L);
            return null;
        }

        public String getNamedValue(Long value)
        {
            if (new Long(0L).equals(value)) return "No-Progress";
            if (new Long(10L).equals(value)) return "Call-Up";
            if (new Long(30L).equals(value)) return "Modem-Up";
            if (new Long(31L).equals(value)) return "Modem-Awaiting-DCD";
            if (new Long(32L).equals(value)) return "Modem-Awaiting-Codes";
            if (new Long(40L).equals(value)) return "TermSrv-Started";
            if (new Long(41L).equals(value)) return "TermSrv-Raw-TCP-Started";
            if (new Long(42L).equals(value)) return "TermSrv-Telnet-Started";
            if (new Long(43L).equals(value)) return "TermSrv-Raw-TCP-Connected";
            if (new Long(44L).equals(value)) return "TermSrv-Telnet-Connected";
            if (new Long(45L).equals(value)) return "TermSrv-Rlogin-Started";
            if (new Long(46L).equals(value)) return "TermSrv-Rlogin-Connected";
            if (new Long(50L).equals(value)) return "Modem-Outdial-Call-Up";
            if (new Long(60L).equals(value)) return "LAN-Session-Up";
            if (new Long(61L).equals(value)) return "LCP-Opening";
            if (new Long(62L).equals(value)) return "CCP-Opening";
            if (new Long(63L).equals(value)) return "IPNCP-Opening";
            if (new Long(64L).equals(value)) return "BNCP-Opening";
            if (new Long(65L).equals(value)) return "LCP-Opened";
            if (new Long(66L).equals(value)) return "CCP-Opened";
            if (new Long(67L).equals(value)) return "IPNCP-Opened";
            if (new Long(68L).equals(value)) return "BNCP-Opened";
            if (new Long(69L).equals(value)) return "LCP-State-Initial";
            if (new Long(70L).equals(value)) return "LCP-State-Starting";
            if (new Long(71L).equals(value)) return "LCP-State-Closed";
            if (new Long(72L).equals(value)) return "LCP-State-Stopped";
            if (new Long(73L).equals(value)) return "LCP-State-Closing";
            if (new Long(74L).equals(value)) return "LCP-State-Stopping";
            if (new Long(75L).equals(value)) return "LCP-State-Request-Sent";
            if (new Long(76L).equals(value)) return "LCP-State-Ack-Received";
            if (new Long(77L).equals(value)) return "LCP-State-Ack-Sent";
            if (new Long(80L).equals(value)) return "IPXNCP-Opened";
            if (new Long(81L).equals(value)) return "ATNCP-Opened";
            if (new Long(82L).equals(value)) return "BACP-Opening";
            if (new Long(83L).equals(value)) return "BACP-Opened";
            if (new Long(90L).equals(value)) return "V110-Up";
            if (new Long(91L).equals(value)) return "V110-State-Opened";
            if (new Long(92L).equals(value)) return "V110-State-Carrier";
            if (new Long(93L).equals(value)) return "V110-State-Reset";
            if (new Long(94L).equals(value)) return "V110-State-Closed";
            return null;
        }
    };

    public static transient NamedValueMap map = null;
    public void setup()
    {
        attributeName = NAME;
        attributeType = 196;
        attributeValue = new NamedValue(map != null ? map : (map = new NamedValueMap()));
    }

    public Attr_XAscendConnectProgress()
    {
        setup();
    }

    public Attr_XAscendConnectProgress(Serializable o)
    {
        setup(o);
    }
}
